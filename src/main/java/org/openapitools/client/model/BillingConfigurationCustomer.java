/*
 * Lago API documentation
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.32.0-beta
 * Contact: tech@getlago.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BillingConfigurationCustomer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-15T13:40:27.972560Z[Etc/UTC]")
public class BillingConfigurationCustomer {
  public static final String SERIALIZED_NAME_INVOICE_GRACE_PERIOD = "invoice_grace_period";
  @SerializedName(SERIALIZED_NAME_INVOICE_GRACE_PERIOD)
  private Integer invoiceGracePeriod;

  /**
   * Payment provider type
   */
  @JsonAdapter(PaymentProviderEnum.Adapter.class)
  public enum PaymentProviderEnum {
    STRIPE("stripe"),
    
    GOCARDLESS("gocardless");

    private String value;

    PaymentProviderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentProviderEnum fromValue(String value) {
      for (PaymentProviderEnum b : PaymentProviderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentProviderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentProviderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentProviderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentProviderEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_PROVIDER = "payment_provider";
  @SerializedName(SERIALIZED_NAME_PAYMENT_PROVIDER)
  private PaymentProviderEnum paymentProvider;

  public static final String SERIALIZED_NAME_PROVIDER_CUSTOMER_ID = "provider_customer_id";
  @SerializedName(SERIALIZED_NAME_PROVIDER_CUSTOMER_ID)
  private String providerCustomerId;

  public static final String SERIALIZED_NAME_SYNC_WITH_PROVIDER = "sync_with_provider";
  @SerializedName(SERIALIZED_NAME_SYNC_WITH_PROVIDER)
  private Boolean syncWithProvider;

  public static final String SERIALIZED_NAME_DOCUMENT_LOCALE = "document_locale";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_LOCALE)
  private String documentLocale;

  public static final String SERIALIZED_NAME_VAT_RATE = "vat_rate";
  @SerializedName(SERIALIZED_NAME_VAT_RATE)
  private BigDecimal vatRate;

  public BillingConfigurationCustomer() {
  }

  public BillingConfigurationCustomer invoiceGracePeriod(Integer invoiceGracePeriod) {
    
    this.invoiceGracePeriod = invoiceGracePeriod;
    return this;
  }

   /**
   * Get invoiceGracePeriod
   * @return invoiceGracePeriod
  **/
  @javax.annotation.Nullable
  public Integer getInvoiceGracePeriod() {
    return invoiceGracePeriod;
  }


  public void setInvoiceGracePeriod(Integer invoiceGracePeriod) {
    this.invoiceGracePeriod = invoiceGracePeriod;
  }


  public BillingConfigurationCustomer paymentProvider(PaymentProviderEnum paymentProvider) {
    
    this.paymentProvider = paymentProvider;
    return this;
  }

   /**
   * Payment provider type
   * @return paymentProvider
  **/
  @javax.annotation.Nullable
  public PaymentProviderEnum getPaymentProvider() {
    return paymentProvider;
  }


  public void setPaymentProvider(PaymentProviderEnum paymentProvider) {
    this.paymentProvider = paymentProvider;
  }


  public BillingConfigurationCustomer providerCustomerId(String providerCustomerId) {
    
    this.providerCustomerId = providerCustomerId;
    return this;
  }

   /**
   * Get providerCustomerId
   * @return providerCustomerId
  **/
  @javax.annotation.Nullable
  public String getProviderCustomerId() {
    return providerCustomerId;
  }


  public void setProviderCustomerId(String providerCustomerId) {
    this.providerCustomerId = providerCustomerId;
  }


  public BillingConfigurationCustomer syncWithProvider(Boolean syncWithProvider) {
    
    this.syncWithProvider = syncWithProvider;
    return this;
  }

   /**
   * Get syncWithProvider
   * @return syncWithProvider
  **/
  @javax.annotation.Nullable
  public Boolean getSyncWithProvider() {
    return syncWithProvider;
  }


  public void setSyncWithProvider(Boolean syncWithProvider) {
    this.syncWithProvider = syncWithProvider;
  }


  public BillingConfigurationCustomer documentLocale(String documentLocale) {
    
    this.documentLocale = documentLocale;
    return this;
  }

   /**
   * Get documentLocale
   * @return documentLocale
  **/
  @javax.annotation.Nullable
  public String getDocumentLocale() {
    return documentLocale;
  }


  public void setDocumentLocale(String documentLocale) {
    this.documentLocale = documentLocale;
  }


  public BillingConfigurationCustomer vatRate(BigDecimal vatRate) {
    
    this.vatRate = vatRate;
    return this;
  }

   /**
   * Get vatRate
   * @return vatRate
  **/
  @javax.annotation.Nullable
  public BigDecimal getVatRate() {
    return vatRate;
  }


  public void setVatRate(BigDecimal vatRate) {
    this.vatRate = vatRate;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the BillingConfigurationCustomer instance itself
   */
  public BillingConfigurationCustomer putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BillingConfigurationCustomer billingConfigurationCustomer = (BillingConfigurationCustomer) o;
    return Objects.equals(this.invoiceGracePeriod, billingConfigurationCustomer.invoiceGracePeriod) &&
        Objects.equals(this.paymentProvider, billingConfigurationCustomer.paymentProvider) &&
        Objects.equals(this.providerCustomerId, billingConfigurationCustomer.providerCustomerId) &&
        Objects.equals(this.syncWithProvider, billingConfigurationCustomer.syncWithProvider) &&
        Objects.equals(this.documentLocale, billingConfigurationCustomer.documentLocale) &&
        Objects.equals(this.vatRate, billingConfigurationCustomer.vatRate)&&
        Objects.equals(this.additionalProperties, billingConfigurationCustomer.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(invoiceGracePeriod, paymentProvider, providerCustomerId, syncWithProvider, documentLocale, vatRate, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BillingConfigurationCustomer {\n");
    sb.append("    invoiceGracePeriod: ").append(toIndentedString(invoiceGracePeriod)).append("\n");
    sb.append("    paymentProvider: ").append(toIndentedString(paymentProvider)).append("\n");
    sb.append("    providerCustomerId: ").append(toIndentedString(providerCustomerId)).append("\n");
    sb.append("    syncWithProvider: ").append(toIndentedString(syncWithProvider)).append("\n");
    sb.append("    documentLocale: ").append(toIndentedString(documentLocale)).append("\n");
    sb.append("    vatRate: ").append(toIndentedString(vatRate)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("invoice_grace_period");
    openapiFields.add("payment_provider");
    openapiFields.add("provider_customer_id");
    openapiFields.add("sync_with_provider");
    openapiFields.add("document_locale");
    openapiFields.add("vat_rate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BillingConfigurationCustomer
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BillingConfigurationCustomer.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BillingConfigurationCustomer is not found in the empty JSON string", BillingConfigurationCustomer.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("payment_provider") != null && !jsonObj.get("payment_provider").isJsonNull()) && !jsonObj.get("payment_provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_provider").toString()));
      }
      if ((jsonObj.get("provider_customer_id") != null && !jsonObj.get("provider_customer_id").isJsonNull()) && !jsonObj.get("provider_customer_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider_customer_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider_customer_id").toString()));
      }
      if ((jsonObj.get("document_locale") != null && !jsonObj.get("document_locale").isJsonNull()) && !jsonObj.get("document_locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `document_locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("document_locale").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BillingConfigurationCustomer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BillingConfigurationCustomer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BillingConfigurationCustomer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BillingConfigurationCustomer.class));

       return (TypeAdapter<T>) new TypeAdapter<BillingConfigurationCustomer>() {
           @Override
           public void write(JsonWriter out, BillingConfigurationCustomer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public BillingConfigurationCustomer read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             BillingConfigurationCustomer instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BillingConfigurationCustomer given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BillingConfigurationCustomer
  * @throws IOException if the JSON string is invalid with respect to BillingConfigurationCustomer
  */
  public static BillingConfigurationCustomer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BillingConfigurationCustomer.class);
  }

 /**
  * Convert an instance of BillingConfigurationCustomer to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

