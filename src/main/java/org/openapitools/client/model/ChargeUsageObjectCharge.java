/*
 * Lago API documentation
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.32.0-beta
 * Contact: tech@getlago.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ChargeUsageObjectCharge
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-15T13:40:27.972560Z[Etc/UTC]")
public class ChargeUsageObjectCharge {
  public static final String SERIALIZED_NAME_LAGO_ID = "lago_id";
  @SerializedName(SERIALIZED_NAME_LAGO_ID)
  private UUID lagoId;

  /**
   * Charge model type
   */
  @JsonAdapter(ChargeModelEnum.Adapter.class)
  public enum ChargeModelEnum {
    STANDARD("standard"),
    
    GRADUATED("graduated"),
    
    PACKAGE("package"),
    
    PERCENTAGE("percentage"),
    
    VOLUME("volume");

    private String value;

    ChargeModelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChargeModelEnum fromValue(String value) {
      for (ChargeModelEnum b : ChargeModelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChargeModelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChargeModelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChargeModelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ChargeModelEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CHARGE_MODEL = "charge_model";
  @SerializedName(SERIALIZED_NAME_CHARGE_MODEL)
  private ChargeModelEnum chargeModel;

  public static final String SERIALIZED_NAME_INSTANT = "instant";
  @SerializedName(SERIALIZED_NAME_INSTANT)
  private Boolean instant;

  public static final String SERIALIZED_NAME_MIN_AMOUNT_CENTS = "min_amount_cents";
  @SerializedName(SERIALIZED_NAME_MIN_AMOUNT_CENTS)
  private Integer minAmountCents;

  public ChargeUsageObjectCharge() {
  }

  public ChargeUsageObjectCharge lagoId(UUID lagoId) {
    
    this.lagoId = lagoId;
    return this;
  }

   /**
   * Get lagoId
   * @return lagoId
  **/
  @javax.annotation.Nullable
  public UUID getLagoId() {
    return lagoId;
  }


  public void setLagoId(UUID lagoId) {
    this.lagoId = lagoId;
  }


  public ChargeUsageObjectCharge chargeModel(ChargeModelEnum chargeModel) {
    
    this.chargeModel = chargeModel;
    return this;
  }

   /**
   * Charge model type
   * @return chargeModel
  **/
  @javax.annotation.Nullable
  public ChargeModelEnum getChargeModel() {
    return chargeModel;
  }


  public void setChargeModel(ChargeModelEnum chargeModel) {
    this.chargeModel = chargeModel;
  }


  public ChargeUsageObjectCharge instant(Boolean instant) {
    
    this.instant = instant;
    return this;
  }

   /**
   * Get instant
   * @return instant
  **/
  @javax.annotation.Nullable
  public Boolean getInstant() {
    return instant;
  }


  public void setInstant(Boolean instant) {
    this.instant = instant;
  }


  public ChargeUsageObjectCharge minAmountCents(Integer minAmountCents) {
    
    this.minAmountCents = minAmountCents;
    return this;
  }

   /**
   * Get minAmountCents
   * @return minAmountCents
  **/
  @javax.annotation.Nullable
  public Integer getMinAmountCents() {
    return minAmountCents;
  }


  public void setMinAmountCents(Integer minAmountCents) {
    this.minAmountCents = minAmountCents;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChargeUsageObjectCharge chargeUsageObjectCharge = (ChargeUsageObjectCharge) o;
    return Objects.equals(this.lagoId, chargeUsageObjectCharge.lagoId) &&
        Objects.equals(this.chargeModel, chargeUsageObjectCharge.chargeModel) &&
        Objects.equals(this.instant, chargeUsageObjectCharge.instant) &&
        Objects.equals(this.minAmountCents, chargeUsageObjectCharge.minAmountCents);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lagoId, chargeModel, instant, minAmountCents);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChargeUsageObjectCharge {\n");
    sb.append("    lagoId: ").append(toIndentedString(lagoId)).append("\n");
    sb.append("    chargeModel: ").append(toIndentedString(chargeModel)).append("\n");
    sb.append("    instant: ").append(toIndentedString(instant)).append("\n");
    sb.append("    minAmountCents: ").append(toIndentedString(minAmountCents)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lago_id");
    openapiFields.add("charge_model");
    openapiFields.add("instant");
    openapiFields.add("min_amount_cents");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ChargeUsageObjectCharge
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ChargeUsageObjectCharge.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChargeUsageObjectCharge is not found in the empty JSON string", ChargeUsageObjectCharge.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ChargeUsageObjectCharge.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChargeUsageObjectCharge` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("lago_id") != null && !jsonObj.get("lago_id").isJsonNull()) && !jsonObj.get("lago_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lago_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lago_id").toString()));
      }
      if ((jsonObj.get("charge_model") != null && !jsonObj.get("charge_model").isJsonNull()) && !jsonObj.get("charge_model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `charge_model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("charge_model").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChargeUsageObjectCharge.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChargeUsageObjectCharge' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChargeUsageObjectCharge> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChargeUsageObjectCharge.class));

       return (TypeAdapter<T>) new TypeAdapter<ChargeUsageObjectCharge>() {
           @Override
           public void write(JsonWriter out, ChargeUsageObjectCharge value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChargeUsageObjectCharge read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ChargeUsageObjectCharge given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ChargeUsageObjectCharge
  * @throws IOException if the JSON string is invalid with respect to ChargeUsageObjectCharge
  */
  public static ChargeUsageObjectCharge fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChargeUsageObjectCharge.class);
  }

 /**
  * Convert an instance of ChargeUsageObjectCharge to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

