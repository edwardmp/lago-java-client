/*
 * Lago API documentation
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.32.0-beta
 * Contact: tech@getlago.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WalletObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-15T13:40:27.972560Z[Etc/UTC]")
public class WalletObject {
  public static final String SERIALIZED_NAME_LAGO_ID = "lago_id";
  @SerializedName(SERIALIZED_NAME_LAGO_ID)
  private UUID lagoId;

  public static final String SERIALIZED_NAME_LAGO_CUSTOMER_ID = "lago_customer_id";
  @SerializedName(SERIALIZED_NAME_LAGO_CUSTOMER_ID)
  private UUID lagoCustomerId;

  public static final String SERIALIZED_NAME_EXTERNAL_CUSTOMER_ID = "external_customer_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_CUSTOMER_ID)
  private String externalCustomerId;

  /**
   * Status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("active"),
    
    TERMINATED("terminated");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RATE_AMOUNT = "rate_amount";
  @SerializedName(SERIALIZED_NAME_RATE_AMOUNT)
  private BigDecimal rateAmount;

  public static final String SERIALIZED_NAME_CREDITS_BALANCE = "credits_balance";
  @SerializedName(SERIALIZED_NAME_CREDITS_BALANCE)
  private BigDecimal creditsBalance;

  public static final String SERIALIZED_NAME_BALANCE = "balance";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_BALANCE)
  private BigDecimal balance;

  public static final String SERIALIZED_NAME_BALANCE_CENTS = "balance_cents";
  @SerializedName(SERIALIZED_NAME_BALANCE_CENTS)
  private Integer balanceCents;

  public static final String SERIALIZED_NAME_CONSUMED_CREDITS = "consumed_credits";
  @SerializedName(SERIALIZED_NAME_CONSUMED_CREDITS)
  private BigDecimal consumedCredits;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_EXPIRATION_AT = "expiration_at";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_AT)
  private OffsetDateTime expirationAt;

  public static final String SERIALIZED_NAME_LAST_BALANCE_SYNC_AT = "last_balance_sync_at";
  @SerializedName(SERIALIZED_NAME_LAST_BALANCE_SYNC_AT)
  private OffsetDateTime lastBalanceSyncAt;

  public static final String SERIALIZED_NAME_LAST_CONSUMED_CREDIT_AT = "last_consumed_credit_at";
  @SerializedName(SERIALIZED_NAME_LAST_CONSUMED_CREDIT_AT)
  private OffsetDateTime lastConsumedCreditAt;

  public static final String SERIALIZED_NAME_TERMINATED_AT = "terminated_at";
  @SerializedName(SERIALIZED_NAME_TERMINATED_AT)
  private OffsetDateTime terminatedAt;

  public WalletObject() {
  }

  public WalletObject lagoId(UUID lagoId) {
    
    this.lagoId = lagoId;
    return this;
  }

   /**
   * Get lagoId
   * @return lagoId
  **/
  @javax.annotation.Nonnull
  public UUID getLagoId() {
    return lagoId;
  }


  public void setLagoId(UUID lagoId) {
    this.lagoId = lagoId;
  }


  public WalletObject lagoCustomerId(UUID lagoCustomerId) {
    
    this.lagoCustomerId = lagoCustomerId;
    return this;
  }

   /**
   * Get lagoCustomerId
   * @return lagoCustomerId
  **/
  @javax.annotation.Nonnull
  public UUID getLagoCustomerId() {
    return lagoCustomerId;
  }


  public void setLagoCustomerId(UUID lagoCustomerId) {
    this.lagoCustomerId = lagoCustomerId;
  }


  public WalletObject externalCustomerId(String externalCustomerId) {
    
    this.externalCustomerId = externalCustomerId;
    return this;
  }

   /**
   * Get externalCustomerId
   * @return externalCustomerId
  **/
  @javax.annotation.Nonnull
  public String getExternalCustomerId() {
    return externalCustomerId;
  }


  public void setExternalCustomerId(String externalCustomerId) {
    this.externalCustomerId = externalCustomerId;
  }


  public WalletObject status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Status
   * @return status
  **/
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public WalletObject currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nonnull
  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public WalletObject name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public WalletObject rateAmount(BigDecimal rateAmount) {
    
    this.rateAmount = rateAmount;
    return this;
  }

   /**
   * Get rateAmount
   * @return rateAmount
  **/
  @javax.annotation.Nonnull
  public BigDecimal getRateAmount() {
    return rateAmount;
  }


  public void setRateAmount(BigDecimal rateAmount) {
    this.rateAmount = rateAmount;
  }


  public WalletObject creditsBalance(BigDecimal creditsBalance) {
    
    this.creditsBalance = creditsBalance;
    return this;
  }

   /**
   * Get creditsBalance
   * @return creditsBalance
  **/
  @javax.annotation.Nonnull
  public BigDecimal getCreditsBalance() {
    return creditsBalance;
  }


  public void setCreditsBalance(BigDecimal creditsBalance) {
    this.creditsBalance = creditsBalance;
  }


  @Deprecated
  public WalletObject balance(BigDecimal balance) {
    
    this.balance = balance;
    return this;
  }

   /**
   * Get balance
   * @return balance
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nonnull
  public BigDecimal getBalance() {
    return balance;
  }


  @Deprecated
  public void setBalance(BigDecimal balance) {
    this.balance = balance;
  }


  public WalletObject balanceCents(Integer balanceCents) {
    
    this.balanceCents = balanceCents;
    return this;
  }

   /**
   * Get balanceCents
   * @return balanceCents
  **/
  @javax.annotation.Nonnull
  public Integer getBalanceCents() {
    return balanceCents;
  }


  public void setBalanceCents(Integer balanceCents) {
    this.balanceCents = balanceCents;
  }


  public WalletObject consumedCredits(BigDecimal consumedCredits) {
    
    this.consumedCredits = consumedCredits;
    return this;
  }

   /**
   * Get consumedCredits
   * @return consumedCredits
  **/
  @javax.annotation.Nonnull
  public BigDecimal getConsumedCredits() {
    return consumedCredits;
  }


  public void setConsumedCredits(BigDecimal consumedCredits) {
    this.consumedCredits = consumedCredits;
  }


  public WalletObject createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public WalletObject expirationAt(OffsetDateTime expirationAt) {
    
    this.expirationAt = expirationAt;
    return this;
  }

   /**
   * Get expirationAt
   * @return expirationAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getExpirationAt() {
    return expirationAt;
  }


  public void setExpirationAt(OffsetDateTime expirationAt) {
    this.expirationAt = expirationAt;
  }


  public WalletObject lastBalanceSyncAt(OffsetDateTime lastBalanceSyncAt) {
    
    this.lastBalanceSyncAt = lastBalanceSyncAt;
    return this;
  }

   /**
   * Get lastBalanceSyncAt
   * @return lastBalanceSyncAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getLastBalanceSyncAt() {
    return lastBalanceSyncAt;
  }


  public void setLastBalanceSyncAt(OffsetDateTime lastBalanceSyncAt) {
    this.lastBalanceSyncAt = lastBalanceSyncAt;
  }


  public WalletObject lastConsumedCreditAt(OffsetDateTime lastConsumedCreditAt) {
    
    this.lastConsumedCreditAt = lastConsumedCreditAt;
    return this;
  }

   /**
   * Get lastConsumedCreditAt
   * @return lastConsumedCreditAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getLastConsumedCreditAt() {
    return lastConsumedCreditAt;
  }


  public void setLastConsumedCreditAt(OffsetDateTime lastConsumedCreditAt) {
    this.lastConsumedCreditAt = lastConsumedCreditAt;
  }


  public WalletObject terminatedAt(OffsetDateTime terminatedAt) {
    
    this.terminatedAt = terminatedAt;
    return this;
  }

   /**
   * Get terminatedAt
   * @return terminatedAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getTerminatedAt() {
    return terminatedAt;
  }


  public void setTerminatedAt(OffsetDateTime terminatedAt) {
    this.terminatedAt = terminatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WalletObject walletObject = (WalletObject) o;
    return Objects.equals(this.lagoId, walletObject.lagoId) &&
        Objects.equals(this.lagoCustomerId, walletObject.lagoCustomerId) &&
        Objects.equals(this.externalCustomerId, walletObject.externalCustomerId) &&
        Objects.equals(this.status, walletObject.status) &&
        Objects.equals(this.currency, walletObject.currency) &&
        Objects.equals(this.name, walletObject.name) &&
        Objects.equals(this.rateAmount, walletObject.rateAmount) &&
        Objects.equals(this.creditsBalance, walletObject.creditsBalance) &&
        Objects.equals(this.balance, walletObject.balance) &&
        Objects.equals(this.balanceCents, walletObject.balanceCents) &&
        Objects.equals(this.consumedCredits, walletObject.consumedCredits) &&
        Objects.equals(this.createdAt, walletObject.createdAt) &&
        Objects.equals(this.expirationAt, walletObject.expirationAt) &&
        Objects.equals(this.lastBalanceSyncAt, walletObject.lastBalanceSyncAt) &&
        Objects.equals(this.lastConsumedCreditAt, walletObject.lastConsumedCreditAt) &&
        Objects.equals(this.terminatedAt, walletObject.terminatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lagoId, lagoCustomerId, externalCustomerId, status, currency, name, rateAmount, creditsBalance, balance, balanceCents, consumedCredits, createdAt, expirationAt, lastBalanceSyncAt, lastConsumedCreditAt, terminatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WalletObject {\n");
    sb.append("    lagoId: ").append(toIndentedString(lagoId)).append("\n");
    sb.append("    lagoCustomerId: ").append(toIndentedString(lagoCustomerId)).append("\n");
    sb.append("    externalCustomerId: ").append(toIndentedString(externalCustomerId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    rateAmount: ").append(toIndentedString(rateAmount)).append("\n");
    sb.append("    creditsBalance: ").append(toIndentedString(creditsBalance)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    balanceCents: ").append(toIndentedString(balanceCents)).append("\n");
    sb.append("    consumedCredits: ").append(toIndentedString(consumedCredits)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    expirationAt: ").append(toIndentedString(expirationAt)).append("\n");
    sb.append("    lastBalanceSyncAt: ").append(toIndentedString(lastBalanceSyncAt)).append("\n");
    sb.append("    lastConsumedCreditAt: ").append(toIndentedString(lastConsumedCreditAt)).append("\n");
    sb.append("    terminatedAt: ").append(toIndentedString(terminatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lago_id");
    openapiFields.add("lago_customer_id");
    openapiFields.add("external_customer_id");
    openapiFields.add("status");
    openapiFields.add("currency");
    openapiFields.add("name");
    openapiFields.add("rate_amount");
    openapiFields.add("credits_balance");
    openapiFields.add("balance");
    openapiFields.add("balance_cents");
    openapiFields.add("consumed_credits");
    openapiFields.add("created_at");
    openapiFields.add("expiration_at");
    openapiFields.add("last_balance_sync_at");
    openapiFields.add("last_consumed_credit_at");
    openapiFields.add("terminated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("lago_id");
    openapiRequiredFields.add("lago_customer_id");
    openapiRequiredFields.add("external_customer_id");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("rate_amount");
    openapiRequiredFields.add("credits_balance");
    openapiRequiredFields.add("balance");
    openapiRequiredFields.add("balance_cents");
    openapiRequiredFields.add("consumed_credits");
    openapiRequiredFields.add("created_at");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WalletObject
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!WalletObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WalletObject is not found in the empty JSON string", WalletObject.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!WalletObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WalletObject` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WalletObject.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("lago_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lago_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lago_id").toString()));
      }
      if (!jsonObj.get("lago_customer_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lago_customer_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lago_customer_id").toString()));
      }
      if (!jsonObj.get("external_customer_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_customer_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_customer_id").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WalletObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WalletObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WalletObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WalletObject.class));

       return (TypeAdapter<T>) new TypeAdapter<WalletObject>() {
           @Override
           public void write(JsonWriter out, WalletObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WalletObject read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WalletObject given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WalletObject
  * @throws IOException if the JSON string is invalid with respect to WalletObject
  */
  public static WalletObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WalletObject.class);
  }

 /**
  * Convert an instance of WalletObject to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

