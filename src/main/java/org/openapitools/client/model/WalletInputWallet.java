/*
 * Lago API documentation
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.32.0-beta
 * Contact: tech@getlago.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WalletInputWallet
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-15T13:40:27.972560Z[Etc/UTC]")
public class WalletInputWallet {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RATE_AMOUNT = "rate_amount";
  @SerializedName(SERIALIZED_NAME_RATE_AMOUNT)
  private BigDecimal rateAmount;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_PAID_CREDITS = "paid_credits";
  @SerializedName(SERIALIZED_NAME_PAID_CREDITS)
  private BigDecimal paidCredits;

  public static final String SERIALIZED_NAME_GRANTED_CREDITS = "granted_credits";
  @SerializedName(SERIALIZED_NAME_GRANTED_CREDITS)
  private BigDecimal grantedCredits;

  public static final String SERIALIZED_NAME_EXTERNAL_CUSTOMER_ID = "external_customer_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_CUSTOMER_ID)
  private String externalCustomerId;

  public static final String SERIALIZED_NAME_EXPIRATION_AT = "expiration_at";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_AT)
  private OffsetDateTime expirationAt;

  public WalletInputWallet() {
  }

  public WalletInputWallet name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public WalletInputWallet rateAmount(BigDecimal rateAmount) {
    
    this.rateAmount = rateAmount;
    return this;
  }

   /**
   * Get rateAmount
   * @return rateAmount
  **/
  @javax.annotation.Nonnull
  public BigDecimal getRateAmount() {
    return rateAmount;
  }


  public void setRateAmount(BigDecimal rateAmount) {
    this.rateAmount = rateAmount;
  }


  public WalletInputWallet currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nonnull
  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public WalletInputWallet paidCredits(BigDecimal paidCredits) {
    
    this.paidCredits = paidCredits;
    return this;
  }

   /**
   * Get paidCredits
   * @return paidCredits
  **/
  @javax.annotation.Nullable
  public BigDecimal getPaidCredits() {
    return paidCredits;
  }


  public void setPaidCredits(BigDecimal paidCredits) {
    this.paidCredits = paidCredits;
  }


  public WalletInputWallet grantedCredits(BigDecimal grantedCredits) {
    
    this.grantedCredits = grantedCredits;
    return this;
  }

   /**
   * Get grantedCredits
   * @return grantedCredits
  **/
  @javax.annotation.Nullable
  public BigDecimal getGrantedCredits() {
    return grantedCredits;
  }


  public void setGrantedCredits(BigDecimal grantedCredits) {
    this.grantedCredits = grantedCredits;
  }


  public WalletInputWallet externalCustomerId(String externalCustomerId) {
    
    this.externalCustomerId = externalCustomerId;
    return this;
  }

   /**
   * Get externalCustomerId
   * @return externalCustomerId
  **/
  @javax.annotation.Nonnull
  public String getExternalCustomerId() {
    return externalCustomerId;
  }


  public void setExternalCustomerId(String externalCustomerId) {
    this.externalCustomerId = externalCustomerId;
  }


  public WalletInputWallet expirationAt(OffsetDateTime expirationAt) {
    
    this.expirationAt = expirationAt;
    return this;
  }

   /**
   * Get expirationAt
   * @return expirationAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getExpirationAt() {
    return expirationAt;
  }


  public void setExpirationAt(OffsetDateTime expirationAt) {
    this.expirationAt = expirationAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WalletInputWallet walletInputWallet = (WalletInputWallet) o;
    return Objects.equals(this.name, walletInputWallet.name) &&
        Objects.equals(this.rateAmount, walletInputWallet.rateAmount) &&
        Objects.equals(this.currency, walletInputWallet.currency) &&
        Objects.equals(this.paidCredits, walletInputWallet.paidCredits) &&
        Objects.equals(this.grantedCredits, walletInputWallet.grantedCredits) &&
        Objects.equals(this.externalCustomerId, walletInputWallet.externalCustomerId) &&
        Objects.equals(this.expirationAt, walletInputWallet.expirationAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, rateAmount, currency, paidCredits, grantedCredits, externalCustomerId, expirationAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WalletInputWallet {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    rateAmount: ").append(toIndentedString(rateAmount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    paidCredits: ").append(toIndentedString(paidCredits)).append("\n");
    sb.append("    grantedCredits: ").append(toIndentedString(grantedCredits)).append("\n");
    sb.append("    externalCustomerId: ").append(toIndentedString(externalCustomerId)).append("\n");
    sb.append("    expirationAt: ").append(toIndentedString(expirationAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("rate_amount");
    openapiFields.add("currency");
    openapiFields.add("paid_credits");
    openapiFields.add("granted_credits");
    openapiFields.add("external_customer_id");
    openapiFields.add("expiration_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("rate_amount");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("external_customer_id");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WalletInputWallet
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!WalletInputWallet.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WalletInputWallet is not found in the empty JSON string", WalletInputWallet.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!WalletInputWallet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WalletInputWallet` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WalletInputWallet.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if (!jsonObj.get("external_customer_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_customer_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_customer_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WalletInputWallet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WalletInputWallet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WalletInputWallet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WalletInputWallet.class));

       return (TypeAdapter<T>) new TypeAdapter<WalletInputWallet>() {
           @Override
           public void write(JsonWriter out, WalletInputWallet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WalletInputWallet read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WalletInputWallet given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WalletInputWallet
  * @throws IOException if the JSON string is invalid with respect to WalletInputWallet
  */
  public static WalletInputWallet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WalletInputWallet.class);
  }

 /**
  * Convert an instance of WalletInputWallet to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

