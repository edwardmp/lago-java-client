/*
 * Lago API documentation
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.32.0-beta
 * Contact: tech@getlago.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.UUID;
import org.openapitools.client.model.FeeObjectItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FeeObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-15T13:40:27.972560Z[Etc/UTC]")
public class FeeObject {
  public static final String SERIALIZED_NAME_LAGO_ID = "lago_id";
  @SerializedName(SERIALIZED_NAME_LAGO_ID)
  private UUID lagoId;

  public static final String SERIALIZED_NAME_LAGO_GROUP_ID = "lago_group_id";
  @SerializedName(SERIALIZED_NAME_LAGO_GROUP_ID)
  private UUID lagoGroupId;

  public static final String SERIALIZED_NAME_LAGO_INVOICE_ID = "lago_invoice_id";
  @SerializedName(SERIALIZED_NAME_LAGO_INVOICE_ID)
  private UUID lagoInvoiceId;

  public static final String SERIALIZED_NAME_LAGO_TRUE_UP_FEE_ID = "lago_true_up_fee_id";
  @SerializedName(SERIALIZED_NAME_LAGO_TRUE_UP_FEE_ID)
  private UUID lagoTrueUpFeeId;

  public static final String SERIALIZED_NAME_LAGO_TRUE_UP_PARENT_FEE_ID = "lago_true_up_parent_fee_id";
  @SerializedName(SERIALIZED_NAME_LAGO_TRUE_UP_PARENT_FEE_ID)
  private UUID lagoTrueUpParentFeeId;

  public static final String SERIALIZED_NAME_EXTERNAL_SUBSCRIPTION_ID = "external_subscription_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_SUBSCRIPTION_ID)
  private String externalSubscriptionId;

  public static final String SERIALIZED_NAME_AMOUNT_CENTS = "amount_cents";
  @SerializedName(SERIALIZED_NAME_AMOUNT_CENTS)
  private Integer amountCents;

  public static final String SERIALIZED_NAME_AMOUNT_CURRENCY = "amount_currency";
  @SerializedName(SERIALIZED_NAME_AMOUNT_CURRENCY)
  private String amountCurrency;

  public static final String SERIALIZED_NAME_VAT_AMOUNT_CENTS = "vat_amount_cents";
  @SerializedName(SERIALIZED_NAME_VAT_AMOUNT_CENTS)
  private Integer vatAmountCents;

  public static final String SERIALIZED_NAME_VAT_AMOUNT_CURRENCY = "vat_amount_currency";
  @SerializedName(SERIALIZED_NAME_VAT_AMOUNT_CURRENCY)
  private String vatAmountCurrency;

  public static final String SERIALIZED_NAME_UNITS = "units";
  @SerializedName(SERIALIZED_NAME_UNITS)
  private BigDecimal units;

  public static final String SERIALIZED_NAME_TOTAL_AMOUNT_CENTS = "total_amount_cents";
  @SerializedName(SERIALIZED_NAME_TOTAL_AMOUNT_CENTS)
  private Integer totalAmountCents;

  public static final String SERIALIZED_NAME_TOTAL_AMOUNT_CURRENCY = "total_amount_currency";
  @SerializedName(SERIALIZED_NAME_TOTAL_AMOUNT_CURRENCY)
  private String totalAmountCurrency;

  public static final String SERIALIZED_NAME_EVENTS_COUNT = "events_count";
  @SerializedName(SERIALIZED_NAME_EVENTS_COUNT)
  private Integer eventsCount;

  public static final String SERIALIZED_NAME_FROM_DATE = "from_date";
  @SerializedName(SERIALIZED_NAME_FROM_DATE)
  private OffsetDateTime fromDate;

  public static final String SERIALIZED_NAME_TO_DATE = "to_date";
  @SerializedName(SERIALIZED_NAME_TO_DATE)
  private OffsetDateTime toDate;

  /**
   * Gets or Sets paymentStatus
   */
  @JsonAdapter(PaymentStatusEnum.Adapter.class)
  public enum PaymentStatusEnum {
    PENDING("pending"),
    
    SUCCEEDED("succeeded"),
    
    FAILED("failed"),
    
    REFUNDED("refunded");

    private String value;

    PaymentStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentStatusEnum fromValue(String value) {
      for (PaymentStatusEnum b : PaymentStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_STATUS = "payment_status";
  @SerializedName(SERIALIZED_NAME_PAYMENT_STATUS)
  private PaymentStatusEnum paymentStatus;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_SUCCEEDED_AT = "succeeded_at";
  @SerializedName(SERIALIZED_NAME_SUCCEEDED_AT)
  private OffsetDateTime succeededAt;

  public static final String SERIALIZED_NAME_FAILED_AT = "failed_at";
  @SerializedName(SERIALIZED_NAME_FAILED_AT)
  private OffsetDateTime failedAt;

  public static final String SERIALIZED_NAME_REFUNDED_AT = "refunded_at";
  @SerializedName(SERIALIZED_NAME_REFUNDED_AT)
  private OffsetDateTime refundedAt;

  public static final String SERIALIZED_NAME_ITEM = "item";
  @SerializedName(SERIALIZED_NAME_ITEM)
  private FeeObjectItem item;

  public FeeObject() {
  }

  public FeeObject lagoId(UUID lagoId) {
    
    this.lagoId = lagoId;
    return this;
  }

   /**
   * Get lagoId
   * @return lagoId
  **/
  @javax.annotation.Nonnull
  public UUID getLagoId() {
    return lagoId;
  }


  public void setLagoId(UUID lagoId) {
    this.lagoId = lagoId;
  }


  public FeeObject lagoGroupId(UUID lagoGroupId) {
    
    this.lagoGroupId = lagoGroupId;
    return this;
  }

   /**
   * Get lagoGroupId
   * @return lagoGroupId
  **/
  @javax.annotation.Nullable
  public UUID getLagoGroupId() {
    return lagoGroupId;
  }


  public void setLagoGroupId(UUID lagoGroupId) {
    this.lagoGroupId = lagoGroupId;
  }


  public FeeObject lagoInvoiceId(UUID lagoInvoiceId) {
    
    this.lagoInvoiceId = lagoInvoiceId;
    return this;
  }

   /**
   * Get lagoInvoiceId
   * @return lagoInvoiceId
  **/
  @javax.annotation.Nullable
  public UUID getLagoInvoiceId() {
    return lagoInvoiceId;
  }


  public void setLagoInvoiceId(UUID lagoInvoiceId) {
    this.lagoInvoiceId = lagoInvoiceId;
  }


  public FeeObject lagoTrueUpFeeId(UUID lagoTrueUpFeeId) {
    
    this.lagoTrueUpFeeId = lagoTrueUpFeeId;
    return this;
  }

   /**
   * Get lagoTrueUpFeeId
   * @return lagoTrueUpFeeId
  **/
  @javax.annotation.Nullable
  public UUID getLagoTrueUpFeeId() {
    return lagoTrueUpFeeId;
  }


  public void setLagoTrueUpFeeId(UUID lagoTrueUpFeeId) {
    this.lagoTrueUpFeeId = lagoTrueUpFeeId;
  }


  public FeeObject lagoTrueUpParentFeeId(UUID lagoTrueUpParentFeeId) {
    
    this.lagoTrueUpParentFeeId = lagoTrueUpParentFeeId;
    return this;
  }

   /**
   * Get lagoTrueUpParentFeeId
   * @return lagoTrueUpParentFeeId
  **/
  @javax.annotation.Nullable
  public UUID getLagoTrueUpParentFeeId() {
    return lagoTrueUpParentFeeId;
  }


  public void setLagoTrueUpParentFeeId(UUID lagoTrueUpParentFeeId) {
    this.lagoTrueUpParentFeeId = lagoTrueUpParentFeeId;
  }


  public FeeObject externalSubscriptionId(String externalSubscriptionId) {
    
    this.externalSubscriptionId = externalSubscriptionId;
    return this;
  }

   /**
   * Get externalSubscriptionId
   * @return externalSubscriptionId
  **/
  @javax.annotation.Nullable
  public String getExternalSubscriptionId() {
    return externalSubscriptionId;
  }


  public void setExternalSubscriptionId(String externalSubscriptionId) {
    this.externalSubscriptionId = externalSubscriptionId;
  }


  public FeeObject amountCents(Integer amountCents) {
    
    this.amountCents = amountCents;
    return this;
  }

   /**
   * Get amountCents
   * @return amountCents
  **/
  @javax.annotation.Nonnull
  public Integer getAmountCents() {
    return amountCents;
  }


  public void setAmountCents(Integer amountCents) {
    this.amountCents = amountCents;
  }


  public FeeObject amountCurrency(String amountCurrency) {
    
    this.amountCurrency = amountCurrency;
    return this;
  }

   /**
   * Get amountCurrency
   * @return amountCurrency
  **/
  @javax.annotation.Nonnull
  public String getAmountCurrency() {
    return amountCurrency;
  }


  public void setAmountCurrency(String amountCurrency) {
    this.amountCurrency = amountCurrency;
  }


  public FeeObject vatAmountCents(Integer vatAmountCents) {
    
    this.vatAmountCents = vatAmountCents;
    return this;
  }

   /**
   * Get vatAmountCents
   * @return vatAmountCents
  **/
  @javax.annotation.Nonnull
  public Integer getVatAmountCents() {
    return vatAmountCents;
  }


  public void setVatAmountCents(Integer vatAmountCents) {
    this.vatAmountCents = vatAmountCents;
  }


  public FeeObject vatAmountCurrency(String vatAmountCurrency) {
    
    this.vatAmountCurrency = vatAmountCurrency;
    return this;
  }

   /**
   * Get vatAmountCurrency
   * @return vatAmountCurrency
  **/
  @javax.annotation.Nonnull
  public String getVatAmountCurrency() {
    return vatAmountCurrency;
  }


  public void setVatAmountCurrency(String vatAmountCurrency) {
    this.vatAmountCurrency = vatAmountCurrency;
  }


  public FeeObject units(BigDecimal units) {
    
    this.units = units;
    return this;
  }

   /**
   * Get units
   * @return units
  **/
  @javax.annotation.Nonnull
  public BigDecimal getUnits() {
    return units;
  }


  public void setUnits(BigDecimal units) {
    this.units = units;
  }


  public FeeObject totalAmountCents(Integer totalAmountCents) {
    
    this.totalAmountCents = totalAmountCents;
    return this;
  }

   /**
   * Get totalAmountCents
   * @return totalAmountCents
  **/
  @javax.annotation.Nullable
  public Integer getTotalAmountCents() {
    return totalAmountCents;
  }


  public void setTotalAmountCents(Integer totalAmountCents) {
    this.totalAmountCents = totalAmountCents;
  }


  public FeeObject totalAmountCurrency(String totalAmountCurrency) {
    
    this.totalAmountCurrency = totalAmountCurrency;
    return this;
  }

   /**
   * Get totalAmountCurrency
   * @return totalAmountCurrency
  **/
  @javax.annotation.Nullable
  public String getTotalAmountCurrency() {
    return totalAmountCurrency;
  }


  public void setTotalAmountCurrency(String totalAmountCurrency) {
    this.totalAmountCurrency = totalAmountCurrency;
  }


  public FeeObject eventsCount(Integer eventsCount) {
    
    this.eventsCount = eventsCount;
    return this;
  }

   /**
   * Get eventsCount
   * @return eventsCount
  **/
  @javax.annotation.Nullable
  public Integer getEventsCount() {
    return eventsCount;
  }


  public void setEventsCount(Integer eventsCount) {
    this.eventsCount = eventsCount;
  }


  public FeeObject fromDate(OffsetDateTime fromDate) {
    
    this.fromDate = fromDate;
    return this;
  }

   /**
   * Get fromDate
   * @return fromDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getFromDate() {
    return fromDate;
  }


  public void setFromDate(OffsetDateTime fromDate) {
    this.fromDate = fromDate;
  }


  public FeeObject toDate(OffsetDateTime toDate) {
    
    this.toDate = toDate;
    return this;
  }

   /**
   * Get toDate
   * @return toDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getToDate() {
    return toDate;
  }


  public void setToDate(OffsetDateTime toDate) {
    this.toDate = toDate;
  }


  public FeeObject paymentStatus(PaymentStatusEnum paymentStatus) {
    
    this.paymentStatus = paymentStatus;
    return this;
  }

   /**
   * Get paymentStatus
   * @return paymentStatus
  **/
  @javax.annotation.Nonnull
  public PaymentStatusEnum getPaymentStatus() {
    return paymentStatus;
  }


  public void setPaymentStatus(PaymentStatusEnum paymentStatus) {
    this.paymentStatus = paymentStatus;
  }


  public FeeObject createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public FeeObject succeededAt(OffsetDateTime succeededAt) {
    
    this.succeededAt = succeededAt;
    return this;
  }

   /**
   * Get succeededAt
   * @return succeededAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getSucceededAt() {
    return succeededAt;
  }


  public void setSucceededAt(OffsetDateTime succeededAt) {
    this.succeededAt = succeededAt;
  }


  public FeeObject failedAt(OffsetDateTime failedAt) {
    
    this.failedAt = failedAt;
    return this;
  }

   /**
   * Get failedAt
   * @return failedAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getFailedAt() {
    return failedAt;
  }


  public void setFailedAt(OffsetDateTime failedAt) {
    this.failedAt = failedAt;
  }


  public FeeObject refundedAt(OffsetDateTime refundedAt) {
    
    this.refundedAt = refundedAt;
    return this;
  }

   /**
   * Get refundedAt
   * @return refundedAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getRefundedAt() {
    return refundedAt;
  }


  public void setRefundedAt(OffsetDateTime refundedAt) {
    this.refundedAt = refundedAt;
  }


  public FeeObject item(FeeObjectItem item) {
    
    this.item = item;
    return this;
  }

   /**
   * Get item
   * @return item
  **/
  @javax.annotation.Nonnull
  public FeeObjectItem getItem() {
    return item;
  }


  public void setItem(FeeObjectItem item) {
    this.item = item;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FeeObject feeObject = (FeeObject) o;
    return Objects.equals(this.lagoId, feeObject.lagoId) &&
        Objects.equals(this.lagoGroupId, feeObject.lagoGroupId) &&
        Objects.equals(this.lagoInvoiceId, feeObject.lagoInvoiceId) &&
        Objects.equals(this.lagoTrueUpFeeId, feeObject.lagoTrueUpFeeId) &&
        Objects.equals(this.lagoTrueUpParentFeeId, feeObject.lagoTrueUpParentFeeId) &&
        Objects.equals(this.externalSubscriptionId, feeObject.externalSubscriptionId) &&
        Objects.equals(this.amountCents, feeObject.amountCents) &&
        Objects.equals(this.amountCurrency, feeObject.amountCurrency) &&
        Objects.equals(this.vatAmountCents, feeObject.vatAmountCents) &&
        Objects.equals(this.vatAmountCurrency, feeObject.vatAmountCurrency) &&
        Objects.equals(this.units, feeObject.units) &&
        Objects.equals(this.totalAmountCents, feeObject.totalAmountCents) &&
        Objects.equals(this.totalAmountCurrency, feeObject.totalAmountCurrency) &&
        Objects.equals(this.eventsCount, feeObject.eventsCount) &&
        Objects.equals(this.fromDate, feeObject.fromDate) &&
        Objects.equals(this.toDate, feeObject.toDate) &&
        Objects.equals(this.paymentStatus, feeObject.paymentStatus) &&
        Objects.equals(this.createdAt, feeObject.createdAt) &&
        Objects.equals(this.succeededAt, feeObject.succeededAt) &&
        Objects.equals(this.failedAt, feeObject.failedAt) &&
        Objects.equals(this.refundedAt, feeObject.refundedAt) &&
        Objects.equals(this.item, feeObject.item);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lagoId, lagoGroupId, lagoInvoiceId, lagoTrueUpFeeId, lagoTrueUpParentFeeId, externalSubscriptionId, amountCents, amountCurrency, vatAmountCents, vatAmountCurrency, units, totalAmountCents, totalAmountCurrency, eventsCount, fromDate, toDate, paymentStatus, createdAt, succeededAt, failedAt, refundedAt, item);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FeeObject {\n");
    sb.append("    lagoId: ").append(toIndentedString(lagoId)).append("\n");
    sb.append("    lagoGroupId: ").append(toIndentedString(lagoGroupId)).append("\n");
    sb.append("    lagoInvoiceId: ").append(toIndentedString(lagoInvoiceId)).append("\n");
    sb.append("    lagoTrueUpFeeId: ").append(toIndentedString(lagoTrueUpFeeId)).append("\n");
    sb.append("    lagoTrueUpParentFeeId: ").append(toIndentedString(lagoTrueUpParentFeeId)).append("\n");
    sb.append("    externalSubscriptionId: ").append(toIndentedString(externalSubscriptionId)).append("\n");
    sb.append("    amountCents: ").append(toIndentedString(amountCents)).append("\n");
    sb.append("    amountCurrency: ").append(toIndentedString(amountCurrency)).append("\n");
    sb.append("    vatAmountCents: ").append(toIndentedString(vatAmountCents)).append("\n");
    sb.append("    vatAmountCurrency: ").append(toIndentedString(vatAmountCurrency)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("    totalAmountCents: ").append(toIndentedString(totalAmountCents)).append("\n");
    sb.append("    totalAmountCurrency: ").append(toIndentedString(totalAmountCurrency)).append("\n");
    sb.append("    eventsCount: ").append(toIndentedString(eventsCount)).append("\n");
    sb.append("    fromDate: ").append(toIndentedString(fromDate)).append("\n");
    sb.append("    toDate: ").append(toIndentedString(toDate)).append("\n");
    sb.append("    paymentStatus: ").append(toIndentedString(paymentStatus)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    succeededAt: ").append(toIndentedString(succeededAt)).append("\n");
    sb.append("    failedAt: ").append(toIndentedString(failedAt)).append("\n");
    sb.append("    refundedAt: ").append(toIndentedString(refundedAt)).append("\n");
    sb.append("    item: ").append(toIndentedString(item)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lago_id");
    openapiFields.add("lago_group_id");
    openapiFields.add("lago_invoice_id");
    openapiFields.add("lago_true_up_fee_id");
    openapiFields.add("lago_true_up_parent_fee_id");
    openapiFields.add("external_subscription_id");
    openapiFields.add("amount_cents");
    openapiFields.add("amount_currency");
    openapiFields.add("vat_amount_cents");
    openapiFields.add("vat_amount_currency");
    openapiFields.add("units");
    openapiFields.add("total_amount_cents");
    openapiFields.add("total_amount_currency");
    openapiFields.add("events_count");
    openapiFields.add("from_date");
    openapiFields.add("to_date");
    openapiFields.add("payment_status");
    openapiFields.add("created_at");
    openapiFields.add("succeeded_at");
    openapiFields.add("failed_at");
    openapiFields.add("refunded_at");
    openapiFields.add("item");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("lago_id");
    openapiRequiredFields.add("amount_cents");
    openapiRequiredFields.add("amount_currency");
    openapiRequiredFields.add("vat_amount_cents");
    openapiRequiredFields.add("vat_amount_currency");
    openapiRequiredFields.add("units");
    openapiRequiredFields.add("payment_status");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("item");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FeeObject
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FeeObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FeeObject is not found in the empty JSON string", FeeObject.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!FeeObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FeeObject` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FeeObject.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("lago_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lago_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lago_id").toString()));
      }
      if ((jsonObj.get("lago_group_id") != null && !jsonObj.get("lago_group_id").isJsonNull()) && !jsonObj.get("lago_group_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lago_group_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lago_group_id").toString()));
      }
      if ((jsonObj.get("lago_invoice_id") != null && !jsonObj.get("lago_invoice_id").isJsonNull()) && !jsonObj.get("lago_invoice_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lago_invoice_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lago_invoice_id").toString()));
      }
      if ((jsonObj.get("lago_true_up_fee_id") != null && !jsonObj.get("lago_true_up_fee_id").isJsonNull()) && !jsonObj.get("lago_true_up_fee_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lago_true_up_fee_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lago_true_up_fee_id").toString()));
      }
      if ((jsonObj.get("lago_true_up_parent_fee_id") != null && !jsonObj.get("lago_true_up_parent_fee_id").isJsonNull()) && !jsonObj.get("lago_true_up_parent_fee_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lago_true_up_parent_fee_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lago_true_up_parent_fee_id").toString()));
      }
      if ((jsonObj.get("external_subscription_id") != null && !jsonObj.get("external_subscription_id").isJsonNull()) && !jsonObj.get("external_subscription_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_subscription_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_subscription_id").toString()));
      }
      if (!jsonObj.get("amount_currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount_currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount_currency").toString()));
      }
      if (!jsonObj.get("vat_amount_currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vat_amount_currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vat_amount_currency").toString()));
      }
      if ((jsonObj.get("total_amount_currency") != null && !jsonObj.get("total_amount_currency").isJsonNull()) && !jsonObj.get("total_amount_currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `total_amount_currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("total_amount_currency").toString()));
      }
      if (!jsonObj.get("payment_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_status").toString()));
      }
      // validate the required field `item`
      FeeObjectItem.validateJsonObject(jsonObj.getAsJsonObject("item"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FeeObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FeeObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FeeObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FeeObject.class));

       return (TypeAdapter<T>) new TypeAdapter<FeeObject>() {
           @Override
           public void write(JsonWriter out, FeeObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FeeObject read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FeeObject given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FeeObject
  * @throws IOException if the JSON string is invalid with respect to FeeObject
  */
  public static FeeObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FeeObject.class);
  }

 /**
  * Convert an instance of FeeObject to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

