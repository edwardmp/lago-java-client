/*
 * Lago API documentation
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.32.0-beta
 * Contact: tech@getlago.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SubscriptionObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-15T13:40:27.972560Z[Etc/UTC]")
public class SubscriptionObject {
  public static final String SERIALIZED_NAME_LAGO_ID = "lago_id";
  @SerializedName(SERIALIZED_NAME_LAGO_ID)
  private UUID lagoId;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "external_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_LAGO_CUSTOMER_ID = "lago_customer_id";
  @SerializedName(SERIALIZED_NAME_LAGO_CUSTOMER_ID)
  private UUID lagoCustomerId;

  public static final String SERIALIZED_NAME_EXTERNAL_CUSTOMER_ID = "external_customer_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_CUSTOMER_ID)
  private String externalCustomerId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PLAN_CODE = "plan_code";
  @SerializedName(SERIALIZED_NAME_PLAN_CODE)
  private String planCode;

  /**
   * Subscription status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("active"),
    
    PENDING("pending"),
    
    TERMINATED("terminated"),
    
    CANCELED("canceled");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  /**
   * Billing time
   */
  @JsonAdapter(BillingTimeEnum.Adapter.class)
  public enum BillingTimeEnum {
    CALENDAR("calendar"),
    
    ANNIVERSARY("anniversary");

    private String value;

    BillingTimeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BillingTimeEnum fromValue(String value) {
      for (BillingTimeEnum b : BillingTimeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BillingTimeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BillingTimeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BillingTimeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BillingTimeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_BILLING_TIME = "billing_time";
  @SerializedName(SERIALIZED_NAME_BILLING_TIME)
  private BillingTimeEnum billingTime;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_AT = "subscription_at";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_AT)
  private OffsetDateTime subscriptionAt;

  public static final String SERIALIZED_NAME_STARTED_AT = "started_at";
  @SerializedName(SERIALIZED_NAME_STARTED_AT)
  private OffsetDateTime startedAt;

  public static final String SERIALIZED_NAME_TERMINATED_AT = "terminated_at";
  @SerializedName(SERIALIZED_NAME_TERMINATED_AT)
  private OffsetDateTime terminatedAt;

  public static final String SERIALIZED_NAME_CANCELED_AT = "canceled_at";
  @SerializedName(SERIALIZED_NAME_CANCELED_AT)
  private OffsetDateTime canceledAt;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_PREVIOUS_PLAN_CODE = "previous_plan_code";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_PLAN_CODE)
  private String previousPlanCode;

  public static final String SERIALIZED_NAME_NEXT_PLAN_CODE = "next_plan_code";
  @SerializedName(SERIALIZED_NAME_NEXT_PLAN_CODE)
  private String nextPlanCode;

  public static final String SERIALIZED_NAME_DOWNGRADE_PLAN_DATE = "downgrade_plan_date";
  @SerializedName(SERIALIZED_NAME_DOWNGRADE_PLAN_DATE)
  private OffsetDateTime downgradePlanDate;

  public SubscriptionObject() {
  }

  public SubscriptionObject lagoId(UUID lagoId) {
    
    this.lagoId = lagoId;
    return this;
  }

   /**
   * Get lagoId
   * @return lagoId
  **/
  @javax.annotation.Nonnull
  public UUID getLagoId() {
    return lagoId;
  }


  public void setLagoId(UUID lagoId) {
    this.lagoId = lagoId;
  }


  public SubscriptionObject externalId(String externalId) {
    
    this.externalId = externalId;
    return this;
  }

   /**
   * Get externalId
   * @return externalId
  **/
  @javax.annotation.Nonnull
  public String getExternalId() {
    return externalId;
  }


  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }


  public SubscriptionObject lagoCustomerId(UUID lagoCustomerId) {
    
    this.lagoCustomerId = lagoCustomerId;
    return this;
  }

   /**
   * Get lagoCustomerId
   * @return lagoCustomerId
  **/
  @javax.annotation.Nonnull
  public UUID getLagoCustomerId() {
    return lagoCustomerId;
  }


  public void setLagoCustomerId(UUID lagoCustomerId) {
    this.lagoCustomerId = lagoCustomerId;
  }


  public SubscriptionObject externalCustomerId(String externalCustomerId) {
    
    this.externalCustomerId = externalCustomerId;
    return this;
  }

   /**
   * Get externalCustomerId
   * @return externalCustomerId
  **/
  @javax.annotation.Nonnull
  public String getExternalCustomerId() {
    return externalCustomerId;
  }


  public void setExternalCustomerId(String externalCustomerId) {
    this.externalCustomerId = externalCustomerId;
  }


  public SubscriptionObject name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public SubscriptionObject planCode(String planCode) {
    
    this.planCode = planCode;
    return this;
  }

   /**
   * Get planCode
   * @return planCode
  **/
  @javax.annotation.Nonnull
  public String getPlanCode() {
    return planCode;
  }


  public void setPlanCode(String planCode) {
    this.planCode = planCode;
  }


  public SubscriptionObject status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Subscription status
   * @return status
  **/
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public SubscriptionObject billingTime(BillingTimeEnum billingTime) {
    
    this.billingTime = billingTime;
    return this;
  }

   /**
   * Billing time
   * @return billingTime
  **/
  @javax.annotation.Nonnull
  public BillingTimeEnum getBillingTime() {
    return billingTime;
  }


  public void setBillingTime(BillingTimeEnum billingTime) {
    this.billingTime = billingTime;
  }


  public SubscriptionObject subscriptionAt(OffsetDateTime subscriptionAt) {
    
    this.subscriptionAt = subscriptionAt;
    return this;
  }

   /**
   * Get subscriptionAt
   * @return subscriptionAt
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getSubscriptionAt() {
    return subscriptionAt;
  }


  public void setSubscriptionAt(OffsetDateTime subscriptionAt) {
    this.subscriptionAt = subscriptionAt;
  }


  public SubscriptionObject startedAt(OffsetDateTime startedAt) {
    
    this.startedAt = startedAt;
    return this;
  }

   /**
   * Get startedAt
   * @return startedAt
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getStartedAt() {
    return startedAt;
  }


  public void setStartedAt(OffsetDateTime startedAt) {
    this.startedAt = startedAt;
  }


  public SubscriptionObject terminatedAt(OffsetDateTime terminatedAt) {
    
    this.terminatedAt = terminatedAt;
    return this;
  }

   /**
   * Get terminatedAt
   * @return terminatedAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getTerminatedAt() {
    return terminatedAt;
  }


  public void setTerminatedAt(OffsetDateTime terminatedAt) {
    this.terminatedAt = terminatedAt;
  }


  public SubscriptionObject canceledAt(OffsetDateTime canceledAt) {
    
    this.canceledAt = canceledAt;
    return this;
  }

   /**
   * Get canceledAt
   * @return canceledAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCanceledAt() {
    return canceledAt;
  }


  public void setCanceledAt(OffsetDateTime canceledAt) {
    this.canceledAt = canceledAt;
  }


  public SubscriptionObject createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public SubscriptionObject previousPlanCode(String previousPlanCode) {
    
    this.previousPlanCode = previousPlanCode;
    return this;
  }

   /**
   * Get previousPlanCode
   * @return previousPlanCode
  **/
  @javax.annotation.Nullable
  public String getPreviousPlanCode() {
    return previousPlanCode;
  }


  public void setPreviousPlanCode(String previousPlanCode) {
    this.previousPlanCode = previousPlanCode;
  }


  public SubscriptionObject nextPlanCode(String nextPlanCode) {
    
    this.nextPlanCode = nextPlanCode;
    return this;
  }

   /**
   * Get nextPlanCode
   * @return nextPlanCode
  **/
  @javax.annotation.Nullable
  public String getNextPlanCode() {
    return nextPlanCode;
  }


  public void setNextPlanCode(String nextPlanCode) {
    this.nextPlanCode = nextPlanCode;
  }


  public SubscriptionObject downgradePlanDate(OffsetDateTime downgradePlanDate) {
    
    this.downgradePlanDate = downgradePlanDate;
    return this;
  }

   /**
   * Get downgradePlanDate
   * @return downgradePlanDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDowngradePlanDate() {
    return downgradePlanDate;
  }


  public void setDowngradePlanDate(OffsetDateTime downgradePlanDate) {
    this.downgradePlanDate = downgradePlanDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubscriptionObject subscriptionObject = (SubscriptionObject) o;
    return Objects.equals(this.lagoId, subscriptionObject.lagoId) &&
        Objects.equals(this.externalId, subscriptionObject.externalId) &&
        Objects.equals(this.lagoCustomerId, subscriptionObject.lagoCustomerId) &&
        Objects.equals(this.externalCustomerId, subscriptionObject.externalCustomerId) &&
        Objects.equals(this.name, subscriptionObject.name) &&
        Objects.equals(this.planCode, subscriptionObject.planCode) &&
        Objects.equals(this.status, subscriptionObject.status) &&
        Objects.equals(this.billingTime, subscriptionObject.billingTime) &&
        Objects.equals(this.subscriptionAt, subscriptionObject.subscriptionAt) &&
        Objects.equals(this.startedAt, subscriptionObject.startedAt) &&
        Objects.equals(this.terminatedAt, subscriptionObject.terminatedAt) &&
        Objects.equals(this.canceledAt, subscriptionObject.canceledAt) &&
        Objects.equals(this.createdAt, subscriptionObject.createdAt) &&
        Objects.equals(this.previousPlanCode, subscriptionObject.previousPlanCode) &&
        Objects.equals(this.nextPlanCode, subscriptionObject.nextPlanCode) &&
        Objects.equals(this.downgradePlanDate, subscriptionObject.downgradePlanDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lagoId, externalId, lagoCustomerId, externalCustomerId, name, planCode, status, billingTime, subscriptionAt, startedAt, terminatedAt, canceledAt, createdAt, previousPlanCode, nextPlanCode, downgradePlanDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubscriptionObject {\n");
    sb.append("    lagoId: ").append(toIndentedString(lagoId)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    lagoCustomerId: ").append(toIndentedString(lagoCustomerId)).append("\n");
    sb.append("    externalCustomerId: ").append(toIndentedString(externalCustomerId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    planCode: ").append(toIndentedString(planCode)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    billingTime: ").append(toIndentedString(billingTime)).append("\n");
    sb.append("    subscriptionAt: ").append(toIndentedString(subscriptionAt)).append("\n");
    sb.append("    startedAt: ").append(toIndentedString(startedAt)).append("\n");
    sb.append("    terminatedAt: ").append(toIndentedString(terminatedAt)).append("\n");
    sb.append("    canceledAt: ").append(toIndentedString(canceledAt)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    previousPlanCode: ").append(toIndentedString(previousPlanCode)).append("\n");
    sb.append("    nextPlanCode: ").append(toIndentedString(nextPlanCode)).append("\n");
    sb.append("    downgradePlanDate: ").append(toIndentedString(downgradePlanDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lago_id");
    openapiFields.add("external_id");
    openapiFields.add("lago_customer_id");
    openapiFields.add("external_customer_id");
    openapiFields.add("name");
    openapiFields.add("plan_code");
    openapiFields.add("status");
    openapiFields.add("billing_time");
    openapiFields.add("subscription_at");
    openapiFields.add("started_at");
    openapiFields.add("terminated_at");
    openapiFields.add("canceled_at");
    openapiFields.add("created_at");
    openapiFields.add("previous_plan_code");
    openapiFields.add("next_plan_code");
    openapiFields.add("downgrade_plan_date");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("lago_id");
    openapiRequiredFields.add("external_id");
    openapiRequiredFields.add("lago_customer_id");
    openapiRequiredFields.add("external_customer_id");
    openapiRequiredFields.add("plan_code");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("billing_time");
    openapiRequiredFields.add("subscription_at");
    openapiRequiredFields.add("started_at");
    openapiRequiredFields.add("created_at");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SubscriptionObject
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SubscriptionObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubscriptionObject is not found in the empty JSON string", SubscriptionObject.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!SubscriptionObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubscriptionObject` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SubscriptionObject.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("lago_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lago_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lago_id").toString()));
      }
      if (!jsonObj.get("external_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_id").toString()));
      }
      if (!jsonObj.get("lago_customer_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lago_customer_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lago_customer_id").toString()));
      }
      if (!jsonObj.get("external_customer_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_customer_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_customer_id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("plan_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plan_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plan_code").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("billing_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billing_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billing_time").toString()));
      }
      if ((jsonObj.get("previous_plan_code") != null && !jsonObj.get("previous_plan_code").isJsonNull()) && !jsonObj.get("previous_plan_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `previous_plan_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("previous_plan_code").toString()));
      }
      if ((jsonObj.get("next_plan_code") != null && !jsonObj.get("next_plan_code").isJsonNull()) && !jsonObj.get("next_plan_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `next_plan_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("next_plan_code").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubscriptionObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubscriptionObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubscriptionObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubscriptionObject.class));

       return (TypeAdapter<T>) new TypeAdapter<SubscriptionObject>() {
           @Override
           public void write(JsonWriter out, SubscriptionObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubscriptionObject read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SubscriptionObject given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SubscriptionObject
  * @throws IOException if the JSON string is invalid with respect to SubscriptionObject
  */
  public static SubscriptionObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubscriptionObject.class);
  }

 /**
  * Convert an instance of SubscriptionObject to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

