/*
 * Lago API documentation
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.32.0-beta
 * Contact: tech@getlago.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.ChargeUsageObjectBillableMetric;
import org.openapitools.client.model.ChargeUsageObjectCharge;
import org.openapitools.client.model.ChargeUsageObjectGroupsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ChargeUsageObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-15T13:40:27.972560Z[Etc/UTC]")
public class ChargeUsageObject {
  public static final String SERIALIZED_NAME_UNITS = "units";
  @SerializedName(SERIALIZED_NAME_UNITS)
  private BigDecimal units;

  public static final String SERIALIZED_NAME_AMOUNT_CENTS = "amount_cents";
  @SerializedName(SERIALIZED_NAME_AMOUNT_CENTS)
  private Integer amountCents;

  public static final String SERIALIZED_NAME_AMOUNT_CURRENCY = "amount_currency";
  @SerializedName(SERIALIZED_NAME_AMOUNT_CURRENCY)
  private String amountCurrency;

  public static final String SERIALIZED_NAME_CHARGE = "charge";
  @SerializedName(SERIALIZED_NAME_CHARGE)
  private ChargeUsageObjectCharge charge;

  public static final String SERIALIZED_NAME_BILLABLE_METRIC = "billable_metric";
  @SerializedName(SERIALIZED_NAME_BILLABLE_METRIC)
  private ChargeUsageObjectBillableMetric billableMetric;

  public static final String SERIALIZED_NAME_GROUPS = "groups";
  @SerializedName(SERIALIZED_NAME_GROUPS)
  private List<ChargeUsageObjectGroupsInner> groups = new ArrayList<>();

  public ChargeUsageObject() {
  }

  public ChargeUsageObject units(BigDecimal units) {
    
    this.units = units;
    return this;
  }

   /**
   * Get units
   * @return units
  **/
  @javax.annotation.Nonnull
  public BigDecimal getUnits() {
    return units;
  }


  public void setUnits(BigDecimal units) {
    this.units = units;
  }


  public ChargeUsageObject amountCents(Integer amountCents) {
    
    this.amountCents = amountCents;
    return this;
  }

   /**
   * Get amountCents
   * @return amountCents
  **/
  @javax.annotation.Nonnull
  public Integer getAmountCents() {
    return amountCents;
  }


  public void setAmountCents(Integer amountCents) {
    this.amountCents = amountCents;
  }


  public ChargeUsageObject amountCurrency(String amountCurrency) {
    
    this.amountCurrency = amountCurrency;
    return this;
  }

   /**
   * Get amountCurrency
   * @return amountCurrency
  **/
  @javax.annotation.Nonnull
  public String getAmountCurrency() {
    return amountCurrency;
  }


  public void setAmountCurrency(String amountCurrency) {
    this.amountCurrency = amountCurrency;
  }


  public ChargeUsageObject charge(ChargeUsageObjectCharge charge) {
    
    this.charge = charge;
    return this;
  }

   /**
   * Get charge
   * @return charge
  **/
  @javax.annotation.Nonnull
  public ChargeUsageObjectCharge getCharge() {
    return charge;
  }


  public void setCharge(ChargeUsageObjectCharge charge) {
    this.charge = charge;
  }


  public ChargeUsageObject billableMetric(ChargeUsageObjectBillableMetric billableMetric) {
    
    this.billableMetric = billableMetric;
    return this;
  }

   /**
   * Get billableMetric
   * @return billableMetric
  **/
  @javax.annotation.Nonnull
  public ChargeUsageObjectBillableMetric getBillableMetric() {
    return billableMetric;
  }


  public void setBillableMetric(ChargeUsageObjectBillableMetric billableMetric) {
    this.billableMetric = billableMetric;
  }


  public ChargeUsageObject groups(List<ChargeUsageObjectGroupsInner> groups) {
    
    this.groups = groups;
    return this;
  }

  public ChargeUsageObject addGroupsItem(ChargeUsageObjectGroupsInner groupsItem) {
    if (this.groups == null) {
      this.groups = new ArrayList<>();
    }
    this.groups.add(groupsItem);
    return this;
  }

   /**
   * Get groups
   * @return groups
  **/
  @javax.annotation.Nonnull
  public List<ChargeUsageObjectGroupsInner> getGroups() {
    return groups;
  }


  public void setGroups(List<ChargeUsageObjectGroupsInner> groups) {
    this.groups = groups;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChargeUsageObject chargeUsageObject = (ChargeUsageObject) o;
    return Objects.equals(this.units, chargeUsageObject.units) &&
        Objects.equals(this.amountCents, chargeUsageObject.amountCents) &&
        Objects.equals(this.amountCurrency, chargeUsageObject.amountCurrency) &&
        Objects.equals(this.charge, chargeUsageObject.charge) &&
        Objects.equals(this.billableMetric, chargeUsageObject.billableMetric) &&
        Objects.equals(this.groups, chargeUsageObject.groups);
  }

  @Override
  public int hashCode() {
    return Objects.hash(units, amountCents, amountCurrency, charge, billableMetric, groups);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChargeUsageObject {\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("    amountCents: ").append(toIndentedString(amountCents)).append("\n");
    sb.append("    amountCurrency: ").append(toIndentedString(amountCurrency)).append("\n");
    sb.append("    charge: ").append(toIndentedString(charge)).append("\n");
    sb.append("    billableMetric: ").append(toIndentedString(billableMetric)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("units");
    openapiFields.add("amount_cents");
    openapiFields.add("amount_currency");
    openapiFields.add("charge");
    openapiFields.add("billable_metric");
    openapiFields.add("groups");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("units");
    openapiRequiredFields.add("amount_cents");
    openapiRequiredFields.add("amount_currency");
    openapiRequiredFields.add("charge");
    openapiRequiredFields.add("billable_metric");
    openapiRequiredFields.add("groups");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ChargeUsageObject
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ChargeUsageObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChargeUsageObject is not found in the empty JSON string", ChargeUsageObject.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ChargeUsageObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChargeUsageObject` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ChargeUsageObject.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("amount_currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount_currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount_currency").toString()));
      }
      // validate the required field `charge`
      ChargeUsageObjectCharge.validateJsonObject(jsonObj.getAsJsonObject("charge"));
      // validate the required field `billable_metric`
      ChargeUsageObjectBillableMetric.validateJsonObject(jsonObj.getAsJsonObject("billable_metric"));
      // ensure the json data is an array
      if (!jsonObj.get("groups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `groups` to be an array in the JSON string but got `%s`", jsonObj.get("groups").toString()));
      }

      JsonArray jsonArraygroups = jsonObj.getAsJsonArray("groups");
      // validate the required field `groups` (array)
      for (int i = 0; i < jsonArraygroups.size(); i++) {
        ChargeUsageObjectGroupsInner.validateJsonObject(jsonArraygroups.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChargeUsageObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChargeUsageObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChargeUsageObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChargeUsageObject.class));

       return (TypeAdapter<T>) new TypeAdapter<ChargeUsageObject>() {
           @Override
           public void write(JsonWriter out, ChargeUsageObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChargeUsageObject read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ChargeUsageObject given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ChargeUsageObject
  * @throws IOException if the JSON string is invalid with respect to ChargeUsageObject
  */
  public static ChargeUsageObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChargeUsageObject.class);
  }

 /**
  * Convert an instance of ChargeUsageObject to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

