/*
 * Lago API documentation
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.32.0-beta
 * Contact: tech@getlago.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.CreditObject;
import org.openapitools.client.model.FeeObject;
import org.openapitools.client.model.SubscriptionObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InvoiceObjectExtendedAllOf
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-15T13:40:27.972560Z[Etc/UTC]")
public class InvoiceObjectExtendedAllOf {
  public static final String SERIALIZED_NAME_CREDITS = "credits";
  @SerializedName(SERIALIZED_NAME_CREDITS)
  private List<CreditObject> credits = new ArrayList<>();

  public static final String SERIALIZED_NAME_FEES = "fees";
  @SerializedName(SERIALIZED_NAME_FEES)
  private List<FeeObject> fees = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBSCRIPTIONS = "subscriptions";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTIONS)
  private List<SubscriptionObject> subscriptions = new ArrayList<>();

  public InvoiceObjectExtendedAllOf() {
  }

  public InvoiceObjectExtendedAllOf credits(List<CreditObject> credits) {
    
    this.credits = credits;
    return this;
  }

  public InvoiceObjectExtendedAllOf addCreditsItem(CreditObject creditsItem) {
    if (this.credits == null) {
      this.credits = new ArrayList<>();
    }
    this.credits.add(creditsItem);
    return this;
  }

   /**
   * Get credits
   * @return credits
  **/
  @javax.annotation.Nonnull
  public List<CreditObject> getCredits() {
    return credits;
  }


  public void setCredits(List<CreditObject> credits) {
    this.credits = credits;
  }


  public InvoiceObjectExtendedAllOf fees(List<FeeObject> fees) {
    
    this.fees = fees;
    return this;
  }

  public InvoiceObjectExtendedAllOf addFeesItem(FeeObject feesItem) {
    if (this.fees == null) {
      this.fees = new ArrayList<>();
    }
    this.fees.add(feesItem);
    return this;
  }

   /**
   * Get fees
   * @return fees
  **/
  @javax.annotation.Nonnull
  public List<FeeObject> getFees() {
    return fees;
  }


  public void setFees(List<FeeObject> fees) {
    this.fees = fees;
  }


  public InvoiceObjectExtendedAllOf subscriptions(List<SubscriptionObject> subscriptions) {
    
    this.subscriptions = subscriptions;
    return this;
  }

  public InvoiceObjectExtendedAllOf addSubscriptionsItem(SubscriptionObject subscriptionsItem) {
    if (this.subscriptions == null) {
      this.subscriptions = new ArrayList<>();
    }
    this.subscriptions.add(subscriptionsItem);
    return this;
  }

   /**
   * Get subscriptions
   * @return subscriptions
  **/
  @javax.annotation.Nonnull
  public List<SubscriptionObject> getSubscriptions() {
    return subscriptions;
  }


  public void setSubscriptions(List<SubscriptionObject> subscriptions) {
    this.subscriptions = subscriptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvoiceObjectExtendedAllOf invoiceObjectExtendedAllOf = (InvoiceObjectExtendedAllOf) o;
    return Objects.equals(this.credits, invoiceObjectExtendedAllOf.credits) &&
        Objects.equals(this.fees, invoiceObjectExtendedAllOf.fees) &&
        Objects.equals(this.subscriptions, invoiceObjectExtendedAllOf.subscriptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(credits, fees, subscriptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvoiceObjectExtendedAllOf {\n");
    sb.append("    credits: ").append(toIndentedString(credits)).append("\n");
    sb.append("    fees: ").append(toIndentedString(fees)).append("\n");
    sb.append("    subscriptions: ").append(toIndentedString(subscriptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("credits");
    openapiFields.add("fees");
    openapiFields.add("subscriptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("credits");
    openapiRequiredFields.add("fees");
    openapiRequiredFields.add("subscriptions");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to InvoiceObjectExtendedAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!InvoiceObjectExtendedAllOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InvoiceObjectExtendedAllOf is not found in the empty JSON string", InvoiceObjectExtendedAllOf.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!InvoiceObjectExtendedAllOf.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InvoiceObjectExtendedAllOf` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InvoiceObjectExtendedAllOf.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("credits").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `credits` to be an array in the JSON string but got `%s`", jsonObj.get("credits").toString()));
      }

      JsonArray jsonArraycredits = jsonObj.getAsJsonArray("credits");
      // validate the required field `credits` (array)
      for (int i = 0; i < jsonArraycredits.size(); i++) {
        CreditObject.validateJsonObject(jsonArraycredits.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("fees").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fees` to be an array in the JSON string but got `%s`", jsonObj.get("fees").toString()));
      }

      JsonArray jsonArrayfees = jsonObj.getAsJsonArray("fees");
      // validate the required field `fees` (array)
      for (int i = 0; i < jsonArrayfees.size(); i++) {
        FeeObject.validateJsonObject(jsonArrayfees.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("subscriptions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptions` to be an array in the JSON string but got `%s`", jsonObj.get("subscriptions").toString()));
      }

      JsonArray jsonArraysubscriptions = jsonObj.getAsJsonArray("subscriptions");
      // validate the required field `subscriptions` (array)
      for (int i = 0; i < jsonArraysubscriptions.size(); i++) {
        SubscriptionObject.validateJsonObject(jsonArraysubscriptions.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InvoiceObjectExtendedAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InvoiceObjectExtendedAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InvoiceObjectExtendedAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InvoiceObjectExtendedAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<InvoiceObjectExtendedAllOf>() {
           @Override
           public void write(JsonWriter out, InvoiceObjectExtendedAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InvoiceObjectExtendedAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InvoiceObjectExtendedAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InvoiceObjectExtendedAllOf
  * @throws IOException if the JSON string is invalid with respect to InvoiceObjectExtendedAllOf
  */
  public static InvoiceObjectExtendedAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InvoiceObjectExtendedAllOf.class);
  }

 /**
  * Convert an instance of InvoiceObjectExtendedAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

