/*
 * Lago API documentation
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.32.0-beta
 * Contact: tech@getlago.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.CustomerObject;
import org.openapitools.client.model.InvoiceMetadataObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InvoiceObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-15T13:40:27.972560Z[Etc/UTC]")
public class InvoiceObject {
  public static final String SERIALIZED_NAME_LAGO_ID = "lago_id";
  @SerializedName(SERIALIZED_NAME_LAGO_ID)
  private UUID lagoId;

  public static final String SERIALIZED_NAME_SEQUENTIAL_ID = "sequential_id";
  @SerializedName(SERIALIZED_NAME_SEQUENTIAL_ID)
  private Integer sequentialId;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private String number;

  public static final String SERIALIZED_NAME_ISSUING_DATE = "issuing_date";
  @SerializedName(SERIALIZED_NAME_ISSUING_DATE)
  private OffsetDateTime issuingDate;

  /**
   * Gets or Sets invoiceType
   */
  @JsonAdapter(InvoiceTypeEnum.Adapter.class)
  public enum InvoiceTypeEnum {
    SUBSCRIPTION("subscription"),
    
    ADD_ON("add_on"),
    
    CREDIT("credit");

    private String value;

    InvoiceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InvoiceTypeEnum fromValue(String value) {
      for (InvoiceTypeEnum b : InvoiceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InvoiceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InvoiceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InvoiceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InvoiceTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_INVOICE_TYPE = "invoice_type";
  @SerializedName(SERIALIZED_NAME_INVOICE_TYPE)
  private InvoiceTypeEnum invoiceType;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    DRAFT("draft"),
    
    FINALIZED("finalized");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  /**
   * Gets or Sets paymentStatus
   */
  @JsonAdapter(PaymentStatusEnum.Adapter.class)
  public enum PaymentStatusEnum {
    PENDING("pending"),
    
    SUCCEEDED("succeeded"),
    
    FAILED("failed");

    private String value;

    PaymentStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentStatusEnum fromValue(String value) {
      for (PaymentStatusEnum b : PaymentStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_STATUS = "payment_status";
  @SerializedName(SERIALIZED_NAME_PAYMENT_STATUS)
  private PaymentStatusEnum paymentStatus;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_FEES_AMOUNT_CENTS = "fees_amount_cents";
  @SerializedName(SERIALIZED_NAME_FEES_AMOUNT_CENTS)
  private Integer feesAmountCents;

  public static final String SERIALIZED_NAME_COUPONS_AMOUNT_CENTS = "coupons_amount_cents";
  @SerializedName(SERIALIZED_NAME_COUPONS_AMOUNT_CENTS)
  private Integer couponsAmountCents;

  public static final String SERIALIZED_NAME_CREDIT_NOTES_AMOUNT_CENTS = "credit_notes_amount_cents";
  @SerializedName(SERIALIZED_NAME_CREDIT_NOTES_AMOUNT_CENTS)
  private Integer creditNotesAmountCents;

  public static final String SERIALIZED_NAME_SUB_TOTAL_VAT_EXCLUDED_AMOUNT_CENTS = "sub_total_vat_excluded_amount_cents";
  @SerializedName(SERIALIZED_NAME_SUB_TOTAL_VAT_EXCLUDED_AMOUNT_CENTS)
  private Integer subTotalVatExcludedAmountCents;

  public static final String SERIALIZED_NAME_VAT_AMOUNT_CENTS = "vat_amount_cents";
  @SerializedName(SERIALIZED_NAME_VAT_AMOUNT_CENTS)
  private Integer vatAmountCents;

  public static final String SERIALIZED_NAME_SUB_TOTAL_VAT_INCLUDED_AMOUNT_CENTS = "sub_total_vat_included_amount_cents";
  @SerializedName(SERIALIZED_NAME_SUB_TOTAL_VAT_INCLUDED_AMOUNT_CENTS)
  private Integer subTotalVatIncludedAmountCents;

  public static final String SERIALIZED_NAME_PREPAID_CREDIT_AMOUNT_CENTS = "prepaid_credit_amount_cents";
  @SerializedName(SERIALIZED_NAME_PREPAID_CREDIT_AMOUNT_CENTS)
  private Integer prepaidCreditAmountCents;

  public static final String SERIALIZED_NAME_TOTAL_AMOUNT_CENTS = "total_amount_cents";
  @SerializedName(SERIALIZED_NAME_TOTAL_AMOUNT_CENTS)
  private Integer totalAmountCents;

  public static final String SERIALIZED_NAME_VERSION_NUMBER = "version_number";
  @SerializedName(SERIALIZED_NAME_VERSION_NUMBER)
  private Integer versionNumber;

  public static final String SERIALIZED_NAME_AMOUNT_CENTS = "amount_cents";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_AMOUNT_CENTS)
  private Integer amountCents;

  public static final String SERIALIZED_NAME_AMOUNT_CURRENCY = "amount_currency";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_AMOUNT_CURRENCY)
  private String amountCurrency;

  public static final String SERIALIZED_NAME_VAT_AMOUNT_CURRENCY = "vat_amount_currency";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_VAT_AMOUNT_CURRENCY)
  private String vatAmountCurrency;

  public static final String SERIALIZED_NAME_CREDIT_AMOUNT_CENTS = "credit_amount_cents";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_CREDIT_AMOUNT_CENTS)
  private Integer creditAmountCents;

  public static final String SERIALIZED_NAME_CREDIT_AMOUNT_CURRENCY = "credit_amount_currency";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_CREDIT_AMOUNT_CURRENCY)
  private String creditAmountCurrency;

  public static final String SERIALIZED_NAME_TOTAL_AMOUNT_CURRENCY = "total_amount_currency";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_TOTAL_AMOUNT_CURRENCY)
  private String totalAmountCurrency;

  public static final String SERIALIZED_NAME_LEGACY = "legacy";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_LEGACY)
  private Boolean legacy;

  public static final String SERIALIZED_NAME_FILE_URL = "file_url";
  @SerializedName(SERIALIZED_NAME_FILE_URL)
  private String fileUrl;

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private CustomerObject customer;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private List<InvoiceMetadataObject> metadata;

  public InvoiceObject() {
  }

  public InvoiceObject lagoId(UUID lagoId) {
    
    this.lagoId = lagoId;
    return this;
  }

   /**
   * Get lagoId
   * @return lagoId
  **/
  @javax.annotation.Nonnull
  public UUID getLagoId() {
    return lagoId;
  }


  public void setLagoId(UUID lagoId) {
    this.lagoId = lagoId;
  }


  public InvoiceObject sequentialId(Integer sequentialId) {
    
    this.sequentialId = sequentialId;
    return this;
  }

   /**
   * Get sequentialId
   * @return sequentialId
  **/
  @javax.annotation.Nonnull
  public Integer getSequentialId() {
    return sequentialId;
  }


  public void setSequentialId(Integer sequentialId) {
    this.sequentialId = sequentialId;
  }


  public InvoiceObject number(String number) {
    
    this.number = number;
    return this;
  }

   /**
   * Get number
   * @return number
  **/
  @javax.annotation.Nonnull
  public String getNumber() {
    return number;
  }


  public void setNumber(String number) {
    this.number = number;
  }


  public InvoiceObject issuingDate(OffsetDateTime issuingDate) {
    
    this.issuingDate = issuingDate;
    return this;
  }

   /**
   * Get issuingDate
   * @return issuingDate
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getIssuingDate() {
    return issuingDate;
  }


  public void setIssuingDate(OffsetDateTime issuingDate) {
    this.issuingDate = issuingDate;
  }


  public InvoiceObject invoiceType(InvoiceTypeEnum invoiceType) {
    
    this.invoiceType = invoiceType;
    return this;
  }

   /**
   * Get invoiceType
   * @return invoiceType
  **/
  @javax.annotation.Nonnull
  public InvoiceTypeEnum getInvoiceType() {
    return invoiceType;
  }


  public void setInvoiceType(InvoiceTypeEnum invoiceType) {
    this.invoiceType = invoiceType;
  }


  public InvoiceObject status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public InvoiceObject paymentStatus(PaymentStatusEnum paymentStatus) {
    
    this.paymentStatus = paymentStatus;
    return this;
  }

   /**
   * Get paymentStatus
   * @return paymentStatus
  **/
  @javax.annotation.Nonnull
  public PaymentStatusEnum getPaymentStatus() {
    return paymentStatus;
  }


  public void setPaymentStatus(PaymentStatusEnum paymentStatus) {
    this.paymentStatus = paymentStatus;
  }


  public InvoiceObject currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nonnull
  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public InvoiceObject feesAmountCents(Integer feesAmountCents) {
    
    this.feesAmountCents = feesAmountCents;
    return this;
  }

   /**
   * Get feesAmountCents
   * @return feesAmountCents
  **/
  @javax.annotation.Nonnull
  public Integer getFeesAmountCents() {
    return feesAmountCents;
  }


  public void setFeesAmountCents(Integer feesAmountCents) {
    this.feesAmountCents = feesAmountCents;
  }


  public InvoiceObject couponsAmountCents(Integer couponsAmountCents) {
    
    this.couponsAmountCents = couponsAmountCents;
    return this;
  }

   /**
   * Get couponsAmountCents
   * @return couponsAmountCents
  **/
  @javax.annotation.Nonnull
  public Integer getCouponsAmountCents() {
    return couponsAmountCents;
  }


  public void setCouponsAmountCents(Integer couponsAmountCents) {
    this.couponsAmountCents = couponsAmountCents;
  }


  public InvoiceObject creditNotesAmountCents(Integer creditNotesAmountCents) {
    
    this.creditNotesAmountCents = creditNotesAmountCents;
    return this;
  }

   /**
   * Get creditNotesAmountCents
   * @return creditNotesAmountCents
  **/
  @javax.annotation.Nonnull
  public Integer getCreditNotesAmountCents() {
    return creditNotesAmountCents;
  }


  public void setCreditNotesAmountCents(Integer creditNotesAmountCents) {
    this.creditNotesAmountCents = creditNotesAmountCents;
  }


  public InvoiceObject subTotalVatExcludedAmountCents(Integer subTotalVatExcludedAmountCents) {
    
    this.subTotalVatExcludedAmountCents = subTotalVatExcludedAmountCents;
    return this;
  }

   /**
   * Get subTotalVatExcludedAmountCents
   * @return subTotalVatExcludedAmountCents
  **/
  @javax.annotation.Nonnull
  public Integer getSubTotalVatExcludedAmountCents() {
    return subTotalVatExcludedAmountCents;
  }


  public void setSubTotalVatExcludedAmountCents(Integer subTotalVatExcludedAmountCents) {
    this.subTotalVatExcludedAmountCents = subTotalVatExcludedAmountCents;
  }


  public InvoiceObject vatAmountCents(Integer vatAmountCents) {
    
    this.vatAmountCents = vatAmountCents;
    return this;
  }

   /**
   * Get vatAmountCents
   * @return vatAmountCents
  **/
  @javax.annotation.Nonnull
  public Integer getVatAmountCents() {
    return vatAmountCents;
  }


  public void setVatAmountCents(Integer vatAmountCents) {
    this.vatAmountCents = vatAmountCents;
  }


  public InvoiceObject subTotalVatIncludedAmountCents(Integer subTotalVatIncludedAmountCents) {
    
    this.subTotalVatIncludedAmountCents = subTotalVatIncludedAmountCents;
    return this;
  }

   /**
   * Get subTotalVatIncludedAmountCents
   * @return subTotalVatIncludedAmountCents
  **/
  @javax.annotation.Nonnull
  public Integer getSubTotalVatIncludedAmountCents() {
    return subTotalVatIncludedAmountCents;
  }


  public void setSubTotalVatIncludedAmountCents(Integer subTotalVatIncludedAmountCents) {
    this.subTotalVatIncludedAmountCents = subTotalVatIncludedAmountCents;
  }


  public InvoiceObject prepaidCreditAmountCents(Integer prepaidCreditAmountCents) {
    
    this.prepaidCreditAmountCents = prepaidCreditAmountCents;
    return this;
  }

   /**
   * Get prepaidCreditAmountCents
   * @return prepaidCreditAmountCents
  **/
  @javax.annotation.Nonnull
  public Integer getPrepaidCreditAmountCents() {
    return prepaidCreditAmountCents;
  }


  public void setPrepaidCreditAmountCents(Integer prepaidCreditAmountCents) {
    this.prepaidCreditAmountCents = prepaidCreditAmountCents;
  }


  public InvoiceObject totalAmountCents(Integer totalAmountCents) {
    
    this.totalAmountCents = totalAmountCents;
    return this;
  }

   /**
   * Get totalAmountCents
   * @return totalAmountCents
  **/
  @javax.annotation.Nonnull
  public Integer getTotalAmountCents() {
    return totalAmountCents;
  }


  public void setTotalAmountCents(Integer totalAmountCents) {
    this.totalAmountCents = totalAmountCents;
  }


  public InvoiceObject versionNumber(Integer versionNumber) {
    
    this.versionNumber = versionNumber;
    return this;
  }

   /**
   * Get versionNumber
   * @return versionNumber
  **/
  @javax.annotation.Nonnull
  public Integer getVersionNumber() {
    return versionNumber;
  }


  public void setVersionNumber(Integer versionNumber) {
    this.versionNumber = versionNumber;
  }


  @Deprecated
  public InvoiceObject amountCents(Integer amountCents) {
    
    this.amountCents = amountCents;
    return this;
  }

   /**
   * Get amountCents
   * @return amountCents
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nonnull
  public Integer getAmountCents() {
    return amountCents;
  }


  @Deprecated
  public void setAmountCents(Integer amountCents) {
    this.amountCents = amountCents;
  }


  @Deprecated
  public InvoiceObject amountCurrency(String amountCurrency) {
    
    this.amountCurrency = amountCurrency;
    return this;
  }

   /**
   * Get amountCurrency
   * @return amountCurrency
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nonnull
  public String getAmountCurrency() {
    return amountCurrency;
  }


  @Deprecated
  public void setAmountCurrency(String amountCurrency) {
    this.amountCurrency = amountCurrency;
  }


  @Deprecated
  public InvoiceObject vatAmountCurrency(String vatAmountCurrency) {
    
    this.vatAmountCurrency = vatAmountCurrency;
    return this;
  }

   /**
   * Get vatAmountCurrency
   * @return vatAmountCurrency
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nonnull
  public String getVatAmountCurrency() {
    return vatAmountCurrency;
  }


  @Deprecated
  public void setVatAmountCurrency(String vatAmountCurrency) {
    this.vatAmountCurrency = vatAmountCurrency;
  }


  @Deprecated
  public InvoiceObject creditAmountCents(Integer creditAmountCents) {
    
    this.creditAmountCents = creditAmountCents;
    return this;
  }

   /**
   * Get creditAmountCents
   * @return creditAmountCents
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nonnull
  public Integer getCreditAmountCents() {
    return creditAmountCents;
  }


  @Deprecated
  public void setCreditAmountCents(Integer creditAmountCents) {
    this.creditAmountCents = creditAmountCents;
  }


  @Deprecated
  public InvoiceObject creditAmountCurrency(String creditAmountCurrency) {
    
    this.creditAmountCurrency = creditAmountCurrency;
    return this;
  }

   /**
   * Get creditAmountCurrency
   * @return creditAmountCurrency
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nonnull
  public String getCreditAmountCurrency() {
    return creditAmountCurrency;
  }


  @Deprecated
  public void setCreditAmountCurrency(String creditAmountCurrency) {
    this.creditAmountCurrency = creditAmountCurrency;
  }


  @Deprecated
  public InvoiceObject totalAmountCurrency(String totalAmountCurrency) {
    
    this.totalAmountCurrency = totalAmountCurrency;
    return this;
  }

   /**
   * Get totalAmountCurrency
   * @return totalAmountCurrency
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nonnull
  public String getTotalAmountCurrency() {
    return totalAmountCurrency;
  }


  @Deprecated
  public void setTotalAmountCurrency(String totalAmountCurrency) {
    this.totalAmountCurrency = totalAmountCurrency;
  }


  @Deprecated
  public InvoiceObject legacy(Boolean legacy) {
    
    this.legacy = legacy;
    return this;
  }

   /**
   * Get legacy
   * @return legacy
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nonnull
  public Boolean getLegacy() {
    return legacy;
  }


  @Deprecated
  public void setLegacy(Boolean legacy) {
    this.legacy = legacy;
  }


  public InvoiceObject fileUrl(String fileUrl) {
    
    this.fileUrl = fileUrl;
    return this;
  }

   /**
   * Get fileUrl
   * @return fileUrl
  **/
  @javax.annotation.Nullable
  public String getFileUrl() {
    return fileUrl;
  }


  public void setFileUrl(String fileUrl) {
    this.fileUrl = fileUrl;
  }


  public InvoiceObject customer(CustomerObject customer) {
    
    this.customer = customer;
    return this;
  }

   /**
   * Get customer
   * @return customer
  **/
  @javax.annotation.Nonnull
  public CustomerObject getCustomer() {
    return customer;
  }


  public void setCustomer(CustomerObject customer) {
    this.customer = customer;
  }


  public InvoiceObject metadata(List<InvoiceMetadataObject> metadata) {
    
    this.metadata = metadata;
    return this;
  }

  public InvoiceObject addMetadataItem(InvoiceMetadataObject metadataItem) {
    if (this.metadata == null) {
      this.metadata = new ArrayList<>();
    }
    this.metadata.add(metadataItem);
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable
  public List<InvoiceMetadataObject> getMetadata() {
    return metadata;
  }


  public void setMetadata(List<InvoiceMetadataObject> metadata) {
    this.metadata = metadata;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvoiceObject invoiceObject = (InvoiceObject) o;
    return Objects.equals(this.lagoId, invoiceObject.lagoId) &&
        Objects.equals(this.sequentialId, invoiceObject.sequentialId) &&
        Objects.equals(this.number, invoiceObject.number) &&
        Objects.equals(this.issuingDate, invoiceObject.issuingDate) &&
        Objects.equals(this.invoiceType, invoiceObject.invoiceType) &&
        Objects.equals(this.status, invoiceObject.status) &&
        Objects.equals(this.paymentStatus, invoiceObject.paymentStatus) &&
        Objects.equals(this.currency, invoiceObject.currency) &&
        Objects.equals(this.feesAmountCents, invoiceObject.feesAmountCents) &&
        Objects.equals(this.couponsAmountCents, invoiceObject.couponsAmountCents) &&
        Objects.equals(this.creditNotesAmountCents, invoiceObject.creditNotesAmountCents) &&
        Objects.equals(this.subTotalVatExcludedAmountCents, invoiceObject.subTotalVatExcludedAmountCents) &&
        Objects.equals(this.vatAmountCents, invoiceObject.vatAmountCents) &&
        Objects.equals(this.subTotalVatIncludedAmountCents, invoiceObject.subTotalVatIncludedAmountCents) &&
        Objects.equals(this.prepaidCreditAmountCents, invoiceObject.prepaidCreditAmountCents) &&
        Objects.equals(this.totalAmountCents, invoiceObject.totalAmountCents) &&
        Objects.equals(this.versionNumber, invoiceObject.versionNumber) &&
        Objects.equals(this.amountCents, invoiceObject.amountCents) &&
        Objects.equals(this.amountCurrency, invoiceObject.amountCurrency) &&
        Objects.equals(this.vatAmountCurrency, invoiceObject.vatAmountCurrency) &&
        Objects.equals(this.creditAmountCents, invoiceObject.creditAmountCents) &&
        Objects.equals(this.creditAmountCurrency, invoiceObject.creditAmountCurrency) &&
        Objects.equals(this.totalAmountCurrency, invoiceObject.totalAmountCurrency) &&
        Objects.equals(this.legacy, invoiceObject.legacy) &&
        Objects.equals(this.fileUrl, invoiceObject.fileUrl) &&
        Objects.equals(this.customer, invoiceObject.customer) &&
        Objects.equals(this.metadata, invoiceObject.metadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lagoId, sequentialId, number, issuingDate, invoiceType, status, paymentStatus, currency, feesAmountCents, couponsAmountCents, creditNotesAmountCents, subTotalVatExcludedAmountCents, vatAmountCents, subTotalVatIncludedAmountCents, prepaidCreditAmountCents, totalAmountCents, versionNumber, amountCents, amountCurrency, vatAmountCurrency, creditAmountCents, creditAmountCurrency, totalAmountCurrency, legacy, fileUrl, customer, metadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvoiceObject {\n");
    sb.append("    lagoId: ").append(toIndentedString(lagoId)).append("\n");
    sb.append("    sequentialId: ").append(toIndentedString(sequentialId)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    issuingDate: ").append(toIndentedString(issuingDate)).append("\n");
    sb.append("    invoiceType: ").append(toIndentedString(invoiceType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    paymentStatus: ").append(toIndentedString(paymentStatus)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    feesAmountCents: ").append(toIndentedString(feesAmountCents)).append("\n");
    sb.append("    couponsAmountCents: ").append(toIndentedString(couponsAmountCents)).append("\n");
    sb.append("    creditNotesAmountCents: ").append(toIndentedString(creditNotesAmountCents)).append("\n");
    sb.append("    subTotalVatExcludedAmountCents: ").append(toIndentedString(subTotalVatExcludedAmountCents)).append("\n");
    sb.append("    vatAmountCents: ").append(toIndentedString(vatAmountCents)).append("\n");
    sb.append("    subTotalVatIncludedAmountCents: ").append(toIndentedString(subTotalVatIncludedAmountCents)).append("\n");
    sb.append("    prepaidCreditAmountCents: ").append(toIndentedString(prepaidCreditAmountCents)).append("\n");
    sb.append("    totalAmountCents: ").append(toIndentedString(totalAmountCents)).append("\n");
    sb.append("    versionNumber: ").append(toIndentedString(versionNumber)).append("\n");
    sb.append("    amountCents: ").append(toIndentedString(amountCents)).append("\n");
    sb.append("    amountCurrency: ").append(toIndentedString(amountCurrency)).append("\n");
    sb.append("    vatAmountCurrency: ").append(toIndentedString(vatAmountCurrency)).append("\n");
    sb.append("    creditAmountCents: ").append(toIndentedString(creditAmountCents)).append("\n");
    sb.append("    creditAmountCurrency: ").append(toIndentedString(creditAmountCurrency)).append("\n");
    sb.append("    totalAmountCurrency: ").append(toIndentedString(totalAmountCurrency)).append("\n");
    sb.append("    legacy: ").append(toIndentedString(legacy)).append("\n");
    sb.append("    fileUrl: ").append(toIndentedString(fileUrl)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lago_id");
    openapiFields.add("sequential_id");
    openapiFields.add("number");
    openapiFields.add("issuing_date");
    openapiFields.add("invoice_type");
    openapiFields.add("status");
    openapiFields.add("payment_status");
    openapiFields.add("currency");
    openapiFields.add("fees_amount_cents");
    openapiFields.add("coupons_amount_cents");
    openapiFields.add("credit_notes_amount_cents");
    openapiFields.add("sub_total_vat_excluded_amount_cents");
    openapiFields.add("vat_amount_cents");
    openapiFields.add("sub_total_vat_included_amount_cents");
    openapiFields.add("prepaid_credit_amount_cents");
    openapiFields.add("total_amount_cents");
    openapiFields.add("version_number");
    openapiFields.add("amount_cents");
    openapiFields.add("amount_currency");
    openapiFields.add("vat_amount_currency");
    openapiFields.add("credit_amount_cents");
    openapiFields.add("credit_amount_currency");
    openapiFields.add("total_amount_currency");
    openapiFields.add("legacy");
    openapiFields.add("file_url");
    openapiFields.add("customer");
    openapiFields.add("metadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("lago_id");
    openapiRequiredFields.add("sequential_id");
    openapiRequiredFields.add("number");
    openapiRequiredFields.add("issuing_date");
    openapiRequiredFields.add("invoice_type");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("payment_status");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("fees_amount_cents");
    openapiRequiredFields.add("coupons_amount_cents");
    openapiRequiredFields.add("credit_notes_amount_cents");
    openapiRequiredFields.add("sub_total_vat_excluded_amount_cents");
    openapiRequiredFields.add("vat_amount_cents");
    openapiRequiredFields.add("sub_total_vat_included_amount_cents");
    openapiRequiredFields.add("prepaid_credit_amount_cents");
    openapiRequiredFields.add("total_amount_cents");
    openapiRequiredFields.add("version_number");
    openapiRequiredFields.add("amount_cents");
    openapiRequiredFields.add("amount_currency");
    openapiRequiredFields.add("vat_amount_currency");
    openapiRequiredFields.add("credit_amount_cents");
    openapiRequiredFields.add("credit_amount_currency");
    openapiRequiredFields.add("total_amount_currency");
    openapiRequiredFields.add("legacy");
    openapiRequiredFields.add("customer");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to InvoiceObject
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!InvoiceObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InvoiceObject is not found in the empty JSON string", InvoiceObject.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!InvoiceObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InvoiceObject` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InvoiceObject.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("lago_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lago_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lago_id").toString()));
      }
      if (!jsonObj.get("number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("number").toString()));
      }
      if (!jsonObj.get("invoice_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoice_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoice_type").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("payment_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_status").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if (!jsonObj.get("amount_currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `amount_currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("amount_currency").toString()));
      }
      if (!jsonObj.get("vat_amount_currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vat_amount_currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vat_amount_currency").toString()));
      }
      if (!jsonObj.get("credit_amount_currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `credit_amount_currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("credit_amount_currency").toString()));
      }
      if (!jsonObj.get("total_amount_currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `total_amount_currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("total_amount_currency").toString()));
      }
      if ((jsonObj.get("file_url") != null && !jsonObj.get("file_url").isJsonNull()) && !jsonObj.get("file_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file_url").toString()));
      }
      // validate the required field `customer`
      CustomerObject.validateJsonObject(jsonObj.getAsJsonObject("customer"));
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        JsonArray jsonArraymetadata = jsonObj.getAsJsonArray("metadata");
        if (jsonArraymetadata != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metadata").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metadata` to be an array in the JSON string but got `%s`", jsonObj.get("metadata").toString()));
          }

          // validate the optional field `metadata` (array)
          for (int i = 0; i < jsonArraymetadata.size(); i++) {
            InvoiceMetadataObject.validateJsonObject(jsonArraymetadata.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InvoiceObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InvoiceObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InvoiceObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InvoiceObject.class));

       return (TypeAdapter<T>) new TypeAdapter<InvoiceObject>() {
           @Override
           public void write(JsonWriter out, InvoiceObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InvoiceObject read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InvoiceObject given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InvoiceObject
  * @throws IOException if the JSON string is invalid with respect to InvoiceObject
  */
  public static InvoiceObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InvoiceObject.class);
  }

 /**
  * Convert an instance of InvoiceObject to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

