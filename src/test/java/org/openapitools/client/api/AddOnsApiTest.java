/*
 * Lago API documentation
 * Lago API allows your application to push customer information and metrics (events) from your application to the billing application.
 *
 * The version of the OpenAPI document: 0.32.0-beta
 * Contact: tech@getlago.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddOn;
import org.openapitools.client.model.AddOnInput;
import org.openapitools.client.model.AddOnsPaginated;
import org.openapitools.client.model.ApiResponseBadRequest;
import org.openapitools.client.model.ApiResponseNotFound;
import org.openapitools.client.model.ApiResponseUnauthorized;
import org.openapitools.client.model.ApiResponseUnprocessableEntity;
import org.openapitools.client.model.AppliedAddOn;
import org.openapitools.client.model.AppliedAddOnInput;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AddOnsApi
 */
@Disabled
public class AddOnsApiTest {

    private final AddOnsApi api = new AddOnsApi();

    /**
     * Apply an add-on to a customer
     *
     * Apply an add-on to a customer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applyAddOnTest() throws ApiException {
        AppliedAddOnInput appliedAddOnInput = null;
        AppliedAddOn response = api.applyAddOn(appliedAddOnInput);
        // TODO: test validations
    }

    /**
     * Create a new add-on
     *
     * Create a new add-on
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAddOnTest() throws ApiException {
        AddOnInput addOnInput = null;
        AddOn response = api.createAddOn(addOnInput);
        // TODO: test validations
    }

    /**
     * Delete an add-on
     *
     * Delete an add-on
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destroyAddOnTest() throws ApiException {
        String code = null;
        AddOn response = api.destroyAddOn(code);
        // TODO: test validations
    }

    /**
     * Find add-on by code
     *
     * Return a single add-on
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findAddOnTest() throws ApiException {
        String code = null;
        AddOn response = api.findAddOn(code);
        // TODO: test validations
    }

    /**
     * Find add-ons
     *
     * Find all add-ons in certain organisation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findAllAddOnsTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        AddOnsPaginated response = api.findAllAddOns(page, perPage);
        // TODO: test validations
    }

    /**
     * Update an existing add-on
     *
     * Update an existing add-on by code
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAddOnTest() throws ApiException {
        String code = null;
        AddOnInput addOnInput = null;
        AddOn response = api.updateAddOn(code, addOnInput);
        // TODO: test validations
    }

}
